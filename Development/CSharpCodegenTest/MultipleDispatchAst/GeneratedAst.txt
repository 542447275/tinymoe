$symbol standard_library::breaking_repeating;

$symbol standard_library::continuing_repeating;

$symbol standard_library::raising_exception;

$symbol standard_library::exiting_program;

$symbol standard_library::exiting_block;

$type standard_library::continuation_trap
{
    $symbol continuation;
    $symbol previous_trap;
}

$type standard_library::continuation_state
{
    $symbol flag;
    $symbol argument;
    $symbol continuation;
    $symbol trap;
}

$procedure standard_library::reset_continuation_state_$expression_to_$expression($state, state, flag, $continuation)
{
    $symbol $the_result;
    state.flag = flag;
    state.argument = $null;
    state.continuation = $null;
    $continuation(
        $state, 
        $the_result
        );
}

$procedure standard_library::call_$expression($state, value, $continuation)
{
    $symbol $the_result;
    $continuation(
        $state, 
        $the_result
        );
}

$procedure standard_library::trap_$expression_without_modifying_trap(state, value, continuation)
{
    $symbol $the_result;
    $symbol the_current_trap;
    the_current_trap = new standard_library::continuation_trap(continuation, state.trap);
    $symbol $state_0;
    $state_0 = state;
    state.trap = the_current_trap;
    value(
        $state_0, 
        $lambda ($state_2, $result_3)
            {
                $the_result = $result_3;
                continuation(
                    state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::trap_$expression(state, value, continuation)
{
    $symbol $the_result;
    standard_library::trap_$expression_without_modifying_trap(
        state, 
        value, 
        $lambda ($state_0, $result_1)
            {
                state.trap = state.trap.previous_trap;
                continuation(
                    state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::fall_into_the_previous_trap(state, continuation)
{
    $symbol the_current_trap;
    the_current_trap = state.trap.continuation;
    $symbol $state_0;
    $state_0 = state;
    the_current_trap(
        $state_0, 
        $null
        );
}

$procedure standard_library::break(state, continuation)
{
    $symbol $the_result;
    standard_library::reset_continuation_state_$expression_to_$expression(
        state, 
        state, 
        standard_library::breaking_repeating, 
        $lambda ($state_0, $result_1)
            {
                standard_library::fall_into_the_previous_trap(
                    $state_0, 
                    $lambda ($state_2, $result_3)
                        {
                            continuation(
                                state, 
                                $the_result
                                );
                        }
                    );
            }
        );
}

$procedure standard_library::continue(state, continuation)
{
    $symbol $the_result;
    standard_library::reset_continuation_state_$expression_to_$expression(
        state, 
        state, 
        standard_library::continuing_repeating, 
        $lambda ($state_0, $result_1)
            {
                standard_library::fall_into_the_previous_trap(
                    $state_0, 
                    $lambda ($state_2, $result_3)
                        {
                            continuation(
                                state, 
                                $the_result
                                );
                        }
                    );
            }
        );
}

$procedure standard_library::raise_$expression(state, exception, continuation)
{
    $symbol $the_result;
    standard_library::reset_continuation_state_$expression_to_$expression(
        state, 
        state, 
        standard_library::raising_exception, 
        $lambda ($state_0, $result_1)
            {
                state.argument = exception;
                standard_library::fall_into_the_previous_trap(
                    $state_0, 
                    $lambda ($state_2, $result_3)
                        {
                            continuation(
                                state, 
                                $the_result
                                );
                        }
                    );
            }
        );
}

$procedure standard_library::exit_program(state, continuation)
{
    $symbol $the_result;
    standard_library::reset_continuation_state_$expression_to_$expression(
        state, 
        state, 
        standard_library::exiting_program, 
        $lambda ($state_0, $result_1)
            {
                standard_library::fall_into_the_previous_trap(
                    $state_0, 
                    $lambda ($state_2, $result_3)
                        {
                            continuation(
                                state, 
                                $the_result
                                );
                        }
                    );
            }
        );
}

$procedure standard_library::exit_block_$expression(state, handle, continuation)
{
    $symbol $the_result;
    standard_library::reset_continuation_state_$expression_to_$expression(
        state, 
        state, 
        standard_library::exiting_block, 
        $lambda ($state_0, $result_1)
            {
                state.argument = handle;
                standard_library::fall_into_the_previous_trap(
                    $state_0, 
                    $lambda ($state_2, $result_3)
                        {
                            continuation(
                                state, 
                                $the_result
                                );
                        }
                    );
            }
        );
}

$procedure standard_library::repeat(state, body, $continuation)
{
    $symbol $the_result;
    standard_library::trap_$expression(
        state, 
        $lambda ($state_0, $continuation_1)
            body(
                $state_0, 
                $lambda ($state_2, $result_3)
                    {
                        $continuation_1(
                            $state_0, 
                            $result_3
                            );
                    }
                );, 
        $lambda ($state_4, $result_5)
            {
                $symbol $select_continuation_8;
                $symbol $select_value_9;
                $select_continuation_8 = $lambda ($state_6, $result_7)
                    {
                        $continuation(
                            state, 
                            $the_result
                            );
                    };
                $select_value_9 = state.flag;
                if (($select_value_9 == standard_library::breaking_repeating)
                    standard_library::reset_continuation_state_$expression_to_$expression(
                        $state_4, 
                        state, 
                        $null, 
                        $select_continuation_8
                        );
                else
                    if (($select_value_9 == standard_library::continuing_repeating)
                        standard_library::reset_continuation_state_$expression_to_$expression(
                            $state_4, 
                            state, 
                            $null, 
                            $lambda ($state_12, $result_13)
                                {
                                    standard_library::repeat(
                                        $state_12, 
                                        body, 
                                        $lambda ($state_14, $result_15)
                                            {
                                                standard_library::call_$expression(
                                                    $state_14, 
                                                    $result_15, 
                                                    $select_continuation_8
                                                    );
                                            }
                                        );
                                }
                            );
                    else
                        if (($select_value_9 == $null)
                            {
                                standard_library::repeat(
                                    $state_4, 
                                    body, 
                                    $lambda ($state_18, $result_19)
                                        {
                                            standard_library::call_$expression(
                                                $state_18, 
                                                $result_19, 
                                                $select_continuation_8
                                                );
                                        }
                                    );
                            }
                        else
                            standard_library::fall_into_the_previous_trap(
                                $state_4, 
                                $select_continuation_8
                                );
            }
        );
}

$procedure standard_library::repeat_while_$expression($state, body, condition, $continuation)
{
    $symbol $the_result;
    standard_library::repeat(
        $state, 
        $lambda ($state_2, $continuation_3)
            {
                condition(
                    $state_2, 
                    $lambda ($state_4, $result_5)
                        {
                            standard_library::if_$expression(
                                $state_4, 
                                standard_library::break, 
                                !$result_5, 
                                $lambda ($state_6, $result_7)
                                    {
                                        body(
                                            $state_6, 
                                            $continuation_3
                                            );
                                    }
                                );
                        }
                    );
            }, 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::repeat_with_$argument_from_$expression_to_$expression($state, deal_with_$expression, lower_bound, upper_bound, $continuation)
{
    $symbol $the_result;
    $symbol the_current_number;
    the_current_number = lower_bound;
    $symbol $state_0;
    $state_0 = $state;
    standard_library::repeat_while_$expression(
        $state_0, 
        $lambda ($state_6, $continuation_7)
            deal_with_$expression(
                $state_6, 
                the_current_number, 
                $lambda ($state_8, $result_9)
                    {
                        standard_library::add_$expression_to_assignable(
                            $state_8, 
                            1, 
                            $lambda ($state_10, $continuation_11)
                                $continuation_11(
                                    $state_10, 
                                    the_current_number
                                    );, 
                            $lambda ($state_12, $input_13, $continuation_14)
                                {
                                    the_current_number = $input_13;
                                    $continuation_14(
                                        $state_12, 
                                        $null
                                        );
                                }, 
                            $continuation_7
                            );
                    }
                );, 
        $lambda ($state_2, $continuation_3)
            $continuation_3(
                $state_2, 
                (the_current_number <= upper_bound)
                );, 
        $lambda ($state_4, $result_5)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::repeat_with_$argument_in_$expression($state, deal_with_$expression, items, $continuation)
{
    items.$dispatch<>standard_library::repeat_with_$argument_in_$expression(
        $state, 
        deal_with_$expression, 
        items, 
        $continuation
        );
}

$procedure standard_library::repeat_with_$argument_in_$expression<array>($state, deal_with_$expression, items, $continuation)
{
    $symbol $the_result;
    standard_library::repeat_with_$argument_from_$expression_to_$expression(
        $state, 
        $lambda ($state_2, index, $continuation_3)
            deal_with_$expression(
                $state_2, 
                items[index], 
                $continuation_3
                );, 
        1, 
        $ArrayLength(items), 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::if_$expression($state, body, condition, $continuation)
{
    $symbol $the_result;
    $the_result = condition;
    $symbol $select_continuation_2;
    $symbol $select_value_3;
    $select_continuation_2 = $lambda ($state_0, $result_1)
        {
            $continuation(
                $state, 
                $the_result
                );
        };
    $select_value_3 = $the_result;
    if (($select_value_3 == $true)
        body(
            $state, 
            $select_continuation_2
            );
    else
        $select_continuation_2(
            $state, 
            $null
            );
}

$procedure standard_library::else_if_$expression($state, signal, body, condition, $continuation)
{
    $symbol $the_result;
    $the_result = signal;
    $symbol $select_continuation_2;
    $symbol $select_value_3;
    $select_continuation_2 = $lambda ($state_0, $result_1)
        {
            $continuation(
                $state, 
                $the_result
                );
        };
    $select_value_3 = $the_result;
    if (($select_value_3 == $false)
        condition(
            $state, 
            $lambda ($state_4, $result_5)
                {
                    $the_result = $result_5;
                    $symbol $select_continuation_8;
                    $symbol $select_value_9;
                    $select_continuation_8 = $select_continuation_2;
                    $select_value_9 = $the_result;
                    if (($select_value_9 == $true)
                        body(
                            $state_4, 
                            $select_continuation_8
                            );
                    else
                        $select_continuation_8(
                            $state_4, 
                            $null
                            );
                }
            );
    else
        $select_continuation_2(
            $state, 
            $null
            );
}

$procedure standard_library::else($state, signal, body, $continuation)
{
    $symbol $the_result;
    $the_result = signal;
    $symbol $select_continuation_2;
    $symbol $select_value_3;
    $select_continuation_2 = $lambda ($state_0, $result_1)
        {
            $continuation(
                $state, 
                $the_result
                );
        };
    $select_value_3 = $the_result;
    if (($select_value_3 == $false)
        body(
            $state, 
            $select_continuation_2
            );
    else
        $select_continuation_2(
            $state, 
            $null
            );
}

$procedure standard_library::try(state, body, $continuation)
{
    $symbol $the_result;
    standard_library::trap_$expression(
        state, 
        $lambda ($state_0, $continuation_1)
            body(
                $state_0, 
                $lambda ($state_2, $result_3)
                    {
                        $continuation_1(
                            $state_0, 
                            $result_3
                            );
                    }
                );, 
        $lambda ($state_4, $result_5)
            {
                $symbol $select_continuation_8;
                $symbol $select_value_9;
                $select_continuation_8 = $lambda ($state_6, $result_7)
                    {
                        $continuation(
                            state, 
                            $the_result
                            );
                    };
                $select_value_9 = state.flag;
                if (($select_value_9 == standard_library::raising_exception)
                    {
                        $the_result = state.argument;
                        standard_library::reset_continuation_state_$expression_to_$expression(
                            $state_4, 
                            state, 
                            $null, 
                            $select_continuation_8
                            );
                    }
                else
                    standard_library::fall_into_the_previous_trap(
                        $state_4, 
                        $select_continuation_8
                        );
            }
        );
}

$procedure standard_library::else_try(state, signal, body, $continuation)
{
    $symbol $the_result;
    standard_library::if_$expression(
        state, 
        $lambda ($state_2, $continuation_3)
            standard_library::trap_$expression(
                $state_2, 
                $lambda ($state_4, $continuation_5)
                    body(
                        $state_4, 
                        $lambda ($state_6, $result_7)
                            {
                                $continuation_5(
                                    $state_4, 
                                    $result_7
                                    );
                            }
                        );, 
                $lambda ($state_8, $result_9)
                    {
                        $symbol $select_continuation_12;
                        $symbol $select_value_13;
                        $select_continuation_12 = $continuation_3;
                        $select_value_13 = state.flag;
                        if (($select_value_13 == standard_library::raising_exception)
                            {
                                $the_result = state.argument;
                                standard_library::reset_continuation_state_$expression_to_$expression(
                                    $state_8, 
                                    state, 
                                    $null, 
                                    $select_continuation_12
                                    );
                            }
                        else
                            standard_library::fall_into_the_previous_trap(
                                $state_8, 
                                $select_continuation_12
                                );
                    }
                );, 
        (signal != $null), 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::catch_$argument(state, signal, body, $continuation)
{
    $symbol $the_result;
    standard_library::if_$expression(
        state, 
        body, 
        (signal != $null), 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::finally(state, signal, body, $continuation)
{
    $symbol $the_result;
    body(
        state, 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::named_block_$argument(state, body, $continuation)
{
    $symbol $the_result;
    $symbol handle;
    handle = new $Object();
    $symbol $state_0;
    $state_0 = state;
    standard_library::trap_$expression(
        $state_0, 
        $lambda ($state_2, $continuation_3)
            body(
                $state_2, 
                handle, 
                $lambda ($state_4, $result_5)
                    {
                        $continuation_3(
                            $state_2, 
                            $result_5
                            );
                    }
                );, 
        $lambda ($state_6, $result_7)
            {
                standard_library::if_$expression(
                    $state_6, 
                    $lambda ($state_10, $continuation_11)
                        standard_library::reset_continuation_state_$expression_to_$expression(
                            $state_10, 
                            state, 
                            $null, 
                            $continuation_11
                            );, 
                    ((state.flag == standard_library::exiting_block) && (state.argument == handle)), 
                    $lambda ($state_8, $result_9)
                        {
                            standard_library::else_if_$expression(
                                $state_8, 
                                $result_9, 
                                standard_library::fall_into_the_previous_trap, 
                                $lambda ($state_14, $continuation_15)
                                    $continuation_15(
                                        $state_14, 
                                        (state.flag != $null)
                                        );, 
                                $lambda ($state_16, $result_17)
                                    {
                                        $continuation(
                                            state, 
                                            $the_result
                                            );
                                    }
                                );
                        }
                    );
            }
        );
}

$procedure standard_library::add_$expression_to_assignable($state, value, $read_variable, $write_variable, $continuation)
{
    $symbol $the_result;
    $read_variable(
        $state, 
        $lambda ($state_0, $result_1)
            {
                $write_variable(
                    $state_0, 
                    ($result_1 + value), 
                    $lambda ($state_2, $result_3)
                        {
                            $continuation(
                                $state, 
                                $the_result
                                );
                        }
                    );
            }
        );
}

$procedure standard_library::substract_$expression_from_assignable($state, value, $read_variable, $write_variable, $continuation)
{
    $symbol $the_result;
    $read_variable(
        $state, 
        $lambda ($state_0, $result_1)
            {
                $write_variable(
                    $state_0, 
                    ($result_1 - value), 
                    $lambda ($state_2, $result_3)
                        {
                            $continuation(
                                $state, 
                                $the_result
                                );
                        }
                    );
            }
        );
}

$procedure standard_library::boolean_of_$primitive($state, value, $continuation)
{
    $symbol $the_result;
    $external ("CastToBoolean")(
        $state, 
        value, 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::integer_of_$primitive($state, value, $continuation)
{
    $symbol $the_result;
    $external ("CastToInteger")(
        $state, 
        value, 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::floating_point_of_$primitive($state, value, $continuation)
{
    $symbol $the_result;
    $external ("CastToFloat")(
        $state, 
        value, 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::string_of_$primitive($state, value, $continuation)
{
    $symbol $the_result;
    $external ("CastToString")(
        $state, 
        value, 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure geometry::square_root_of_$primitive($state, number, $continuation)
{
    $symbol $the_result;
    $external ("Sqrt")(
        $state, 
        number, 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure geometry::print_$expression($state, message, $continuation)
{
    $symbol $the_result;
    $external ("Print")(
        $state, 
        message, 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$type geometry::rectangle
{
    $symbol width;
    $symbol height;
}

$type geometry::triangle
{
    $symbol a;
    $symbol b;
    $symbol c;
}

$type geometry::circle
{
    $symbol radius;
}

$procedure geometry::area_of_$primitive($state, shape, $continuation)
{
    shape.$dispatch<>geometry::area_of_$primitive(
        $state, 
        shape, 
        $continuation
        );
}

$procedure geometry::area_of_$primitive<rectangle>($state, shape, $continuation)
{
    $symbol $the_result;
    $the_result = (shape.width * shape.height);
    $continuation(
        $state, 
        $the_result
        );
}

$procedure geometry::area_of_$primitive<triangle>($state, shape, $continuation)
{
    $symbol $the_result;
    $symbol a;
    a = shape.a;
    $symbol $state_0;
    $state_0 = $state;
    $symbol b;
    b = shape.b;
    $symbol $state_2;
    $state_2 = $state_0;
    $symbol c;
    c = shape.c;
    $symbol $state_4;
    $state_4 = $state_2;
    $symbol p;
    p = (((a + b) + c) / 2);
    $symbol $state_6;
    $state_6 = $state_4;
    geometry::square_root_of_$primitive(
        $state_6, 
        (((p * (p - a)) * (p - b)) * (p - c)), 
        $lambda ($state_8, $result_9)
            {
                $the_result = $result_9;
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure geometry::area_of_$primitive<circle>($state, shape, $continuation)
{
    $symbol $the_result;
    $symbol r;
    r = shape.radius;
    $the_result = ((r * r) * 3.14);
    $continuation(
        $state, 
        $the_result
        );
}

$procedure geometry::$primitive_and_$expression_are_the_same_shape($state, a, b, $continuation)
{
    a.$dispatch<>geometry::$primitive_and_$expression_are_the_same_shape(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure geometry::$primitive<rectangle>_and_$expression<rectangle>_are_the_same_shape($state, a, b, $continuation)
{
    $symbol $the_result;
    $the_result = $true;
    $continuation(
        $state, 
        $the_result
        );
}

$procedure geometry::$primitive<triangle>_and_$expression<triangle>_are_the_same_shape($state, a, b, $continuation)
{
    $symbol $the_result;
    $the_result = $true;
    $continuation(
        $state, 
        $the_result
        );
}

$procedure geometry::$primitive<circle>_and_$expression<circle>_are_the_same_shape($state, a, b, $continuation)
{
    $symbol $the_result;
    $the_result = $true;
    $continuation(
        $state, 
        $the_result
        );
}

$procedure geometry::main($state, $continuation)
{
    $symbol $the_result;
    $symbol shape_one;
    shape_one = new geometry::triangle(2, 3, 4);
    $symbol $state_0;
    $state_0 = $state;
    $symbol shape_two;
    shape_two = new geometry::rectangle(1, 2);
    $symbol $state_2;
    $state_2 = $state_0;
    geometry::$primitive_and_$expression_are_the_same_shape(
        $state_2, 
        shape_one, 
        shape_two, 
        $lambda ($state_4, $result_5)
            {
                standard_library::if_$expression(
                    $state_4, 
                    $lambda ($state_8, $continuation_9)
                        geometry::print_$expression(
                            $state_8, 
                            "This world is mad!", 
                            $continuation_9
                            );, 
                    $result_5, 
                    $lambda ($state_6, $result_7)
                        {
                            standard_library::else(
                                $state_6, 
                                $result_7, 
                                $lambda ($state_14, $continuation_15)
                                    geometry::print_$expression(
                                        $state_14, 
                                        "Triangle and rectangle are not the same shape!", 
                                        $continuation_15
                                        );, 
                                $lambda ($state_12, $result_13)
                                    {
                                        $continuation(
                                            $state, 
                                            $the_result
                                            );
                                    }
                                );
                        }
                    );
            }
        );
}

$procedure $dispatch_fail<>standard_library::repeat_with_$argument_in_$expression($state, deal_with_$expression, items, $continuation)
{
    $symbol $the_result;
    standard_library::raise_$expression(
        $state, 
        "Only enumerable object (like containers) can be iterated using the repeat-with-in statement.", 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure ($Array).$dispatch<>standard_library::repeat_with_$argument_in_$expression($state, deal_with_$expression, items, $continuation)
{
    standard_library::repeat_with_$argument_in_$expression<array>(
        $state, 
        deal_with_$expression, 
        items, 
        $continuation
        );
}

$procedure ($Object).$dispatch<>standard_library::repeat_with_$argument_in_$expression($state, deal_with_$expression, items, $continuation)
{
    $dispatch_fail<>standard_library::repeat_with_$argument_in_$expression(
        $state, 
        deal_with_$expression, 
        items, 
        $continuation
        );
}

$procedure $dispatch_fail<>geometry::area_of_$primitive($state, shape, $continuation)
{
    $symbol $the_result;
    standard_library::raise_$expression(
        $state, 
        "This is not a shape.", 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure (geometry::rectangle).$dispatch<>geometry::area_of_$primitive($state, shape, $continuation)
{
    geometry::area_of_$primitive<rectangle>(
        $state, 
        shape, 
        $continuation
        );
}

$procedure (geometry::triangle).$dispatch<>geometry::area_of_$primitive($state, shape, $continuation)
{
    geometry::area_of_$primitive<triangle>(
        $state, 
        shape, 
        $continuation
        );
}

$procedure (geometry::circle).$dispatch<>geometry::area_of_$primitive($state, shape, $continuation)
{
    geometry::area_of_$primitive<circle>(
        $state, 
        shape, 
        $continuation
        );
}

$procedure ($Object).$dispatch<>geometry::area_of_$primitive($state, shape, $continuation)
{
    $dispatch_fail<>geometry::area_of_$primitive(
        $state, 
        shape, 
        $continuation
        );
}

$procedure $dispatch_fail<>geometry::$primitive_and_$expression_are_the_same_shape($state, a, b, $continuation)
{
    $symbol $the_result;
    $the_result = $false;
    $continuation(
        $state, 
        $the_result
        );
}

$procedure (geometry::rectangle).$dispatch<>geometry::$primitive_and_$expression_are_the_same_shape($state, a, b, $continuation)
{
    b.$dispatch<geometry::rectangle>geometry::$primitive_and_$expression_are_the_same_shape(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure (geometry::rectangle).$dispatch<geometry::rectangle>geometry::$primitive_and_$expression_are_the_same_shape($state, a, b, $continuation)
{
    geometry::$primitive<rectangle>_and_$expression<rectangle>_are_the_same_shape(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure (geometry::triangle).$dispatch<>geometry::$primitive_and_$expression_are_the_same_shape($state, a, b, $continuation)
{
    b.$dispatch<geometry::triangle>geometry::$primitive_and_$expression_are_the_same_shape(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure (geometry::triangle).$dispatch<geometry::triangle>geometry::$primitive_and_$expression_are_the_same_shape($state, a, b, $continuation)
{
    geometry::$primitive<triangle>_and_$expression<triangle>_are_the_same_shape(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure (geometry::circle).$dispatch<>geometry::$primitive_and_$expression_are_the_same_shape($state, a, b, $continuation)
{
    b.$dispatch<geometry::circle>geometry::$primitive_and_$expression_are_the_same_shape(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure (geometry::circle).$dispatch<geometry::circle>geometry::$primitive_and_$expression_are_the_same_shape($state, a, b, $continuation)
{
    geometry::$primitive<circle>_and_$expression<circle>_are_the_same_shape(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Object).$dispatch<>geometry::$primitive_and_$expression_are_the_same_shape($state, a, b, $continuation)
{
    $dispatch_fail<>geometry::$primitive_and_$expression_are_the_same_shape(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Object).$dispatch<geometry::circle>geometry::$primitive_and_$expression_are_the_same_shape($state, a, b, $continuation)
{
    $dispatch_fail<>geometry::$primitive_and_$expression_are_the_same_shape(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Object).$dispatch<geometry::rectangle>geometry::$primitive_and_$expression_are_the_same_shape($state, a, b, $continuation)
{
    $dispatch_fail<>geometry::$primitive_and_$expression_are_the_same_shape(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Object).$dispatch<geometry::triangle>geometry::$primitive_and_$expression_are_the_same_shape($state, a, b, $continuation)
{
    $dispatch_fail<>geometry::$primitive_and_$expression_are_the_same_shape(
        $state, 
        a, 
        b, 
        $continuation
        );
}

