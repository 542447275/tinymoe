$procedure standard_library::trap_$expression_with_fall_back_$expression_restored(state, value, fall_back, continuation)
{
    $symbol $the_result;
    standard_library::trap_$expression_with_fall_back_$expression_restored_internal(
        state, 
        value, 
        fall_back, 
        $lambda ($state_0, $result_1)
            {
                state.trap = state.trap.previous_trap;
                standard_library::set_fall_back_counter_of_$expression(
                    $state_0, 
                    state, 
                    $lambda ($state_2, $result_3)
                        {
                            continuation(
                                state, 
                                $the_result
                                );
                        }
                    );
            }
        );
}

$procedure standard_library::fall_into_the_previous_trap(state, continuation)
{
    $symbol the_current_trap;
    the_current_trap = state.trap.continuation;
    $symbol $state_0;
    $state_0 = state;
    the_current_trap(
        $state_0, 
        $null
        );
}

$procedure standard_library::break(state, continuation)
{
    $symbol $the_result;
    standard_library::reset_continuation_state_$expression_to_$expression(
        state, 
        state, 
        standard_library::breaking_repeating, 
        $lambda ($state_0, $result_1)
            {
                standard_library::fall_into_the_previous_trap(
                    $state_0, 
                    $lambda ($state_2, $result_3)
                        {
                            continuation(
                                state, 
                                $the_result
                                );
                        }
                    );
            }
        );
}

$procedure standard_library::continue(state, continuation)
{
    $symbol $the_result;
    standard_library::reset_continuation_state_$expression_to_$expression(
        state, 
        state, 
        standard_library::continuing_repeating, 
        $lambda ($state_0, $result_1)
            {
                standard_library::fall_into_the_previous_trap(
                    $state_0, 
                    $lambda ($state_2, $result_3)
                        {
                            continuation(
                                state, 
                                $the_result
                                );
                        }
                    );
            }
        );
}

$procedure standard_library::raise_$expression(state, exception, continuation)
{
    $symbol $the_result;
    standard_library::reset_continuation_state_$expression_to_$expression(
        state, 
        state, 
        standard_library::raising_exception, 
        $lambda ($state_0, $result_1)
            {
                state.argument = exception;
                standard_library::fall_into_the_previous_trap(
                    $state_0, 
                    $lambda ($state_2, $result_3)
                        {
                            continuation(
                                state, 
                                $the_result
                                );
                        }
                    );
            }
        );
}

$procedure standard_library::exit_program(state, continuation)
{
    $symbol $the_result;
    standard_library::reset_continuation_state_$expression_to_$expression(
        state, 
        state, 
        standard_library::exiting_program, 
        $lambda ($state_0, $result_1)
            {
                standard_library::fall_into_the_previous_trap(
                    $state_0, 
                    $lambda ($state_2, $result_3)
                        {
                            continuation(
                                state, 
                                $the_result
                                );
                        }
                    );
            }
        );
}

$procedure standard_library::exit_block_$expression(state, handle, continuation)
{
    $symbol $the_result;
    standard_library::reset_continuation_state_$expression_to_$expression(
        state, 
        state, 
        standard_library::exiting_block, 
        $lambda ($state_0, $result_1)
            {
                state.argument = handle;
                standard_library::fall_into_the_previous_trap(
                    $state_0, 
                    $lambda ($state_2, $result_3)
                        {
                            continuation(
                                state, 
                                $the_result
                                );
                        }
                    );
            }
        );
}

$procedure standard_library::repeat(state, body, $continuation)
{
    $symbol $the_result;
    standard_library::trap_$expression(
        state, 
        $lambda ($state_0, $continuation_1)
            body(
                $state_0, 
                $lambda ($state_2, $result_3)
                    {
                        $continuation_1(
                            $state_0, 
                            $result_3
                            );
                    }
                );, 
        $lambda ($state_4, $result_5)
            {
                $symbol $select_continuation_8;
                $symbol $select_value_9;
                $select_continuation_8 = $lambda ($state_6, $result_7)
                    {
                        $continuation(
                            state, 
                            $the_result
                            );
                    };
                $select_value_9 = state.flag;
                if (($select_value_9 == standard_library::breaking_repeating)
                    standard_library::reset_continuation_state_$expression_to_$expression(
                        $state_4, 
                        state, 
                        $null, 
                        $select_continuation_8
                        );
                else
                    if (($select_value_9 == standard_library::continuing_repeating)
                        standard_library::reset_continuation_state_$expression_to_$expression(
                            $state_4, 
                            state, 
                            $null, 
                            $lambda ($state_12, $result_13)
                                {
                                    standard_library::repeat(
                                        $state_12, 
                                        body, 
                                        $lambda ($state_14, $result_15)
                                            {
                                                standard_library::call_$expression(
                                                    $state_14, 
                                                    $result_15, 
                                                    $select_continuation_8
                                                    );
                                            }
                                        );
                                }
                            );
                    else
                        if (($select_value_9 == $null)
                            {
                                standard_library::repeat(
                                    $state_4, 
                                    body, 
                                    $lambda ($state_18, $result_19)
                                        {
                                            standard_library::call_$expression(
                                                $state_18, 
                                                $result_19, 
                                                $select_continuation_8
                                                );
                                        }
                                    );
                            }
                        else
                            standard_library::fall_into_the_previous_trap(
                                $state_4, 
                                $select_continuation_8
                                );
            }
        );
}

$procedure standard_library::repeat_while_$expression($state, body, condition, $continuation)
{
    $symbol $the_result;
    standard_library::repeat(
        $state, 
        $lambda ($state_2, $continuation_3)
            {
                condition(
                    $state_2, 
                    $lambda ($state_4, $result_5)
                        {
                            standard_library::if_$expression(
                                $state_4, 
                                standard_library::break, 
                                !$result_5, 
                                $lambda ($state_6, $result_7)
                                    {
                                        body(
                                            $state_6, 
                                            $continuation_3
                                            );
                                    }
                                );
                        }
                    );
            }, 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::repeat_with_$argument_from_$expression_to_$expression($state, deal_with_$expression, lower_bound, upper_bound, $continuation)
{
    $symbol $the_result;
    $symbol the_current_number;
    the_current_number = (lower_bound - 1);
    $symbol $state_0;
    $state_0 = $state;
    standard_library::repeat_while_$expression(
        $state_0, 
        $lambda ($state_6, $continuation_7)
            standard_library::add_$expression_to_assignable(
                $state_6, 
                1, 
                $lambda ($state_8, $continuation_9)
                    $continuation_9(
                        $state_8, 
                        the_current_number
                        );, 
                $lambda ($state_10, $input_11, $continuation_12)
                    {
                        the_current_number = $input_11;
                        $continuation_12(
                            $state_10, 
                            $null
                            );
                    }, 
                $lambda ($state_13, $result_14)
                    {
                        deal_with_$expression(
                            $state_13, 
                            the_current_number, 
                            $continuation_7
                            );
                    }
                );, 
        $lambda ($state_2, $continuation_3)
            $continuation_3(
                $state_2, 
                (the_current_number < upper_bound)
                );, 
        $lambda ($state_4, $result_5)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::repeat_with_$argument_in_$expression($state, deal_with_$expression, items, $continuation)
{
    items.$dispatch<>standard_library::repeat_with_$argument_in_$expression(
        $state, 
        deal_with_$expression, 
        items, 
        $continuation
        );
}

$procedure standard_library::repeat_with_$argument_in_$expression<array>($state, deal_with_$expression, items, $continuation)
{
    $symbol $the_result;
    standard_library::repeat_with_$argument_from_$expression_to_$expression(
        $state, 
        $lambda ($state_2, index, $continuation_3)
            deal_with_$expression(
                $state_2, 
                items[index], 
                $continuation_3
                );, 
        1, 
        $ArrayLength(items), 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::if_$expression($state, body, condition, $continuation)
{
    $symbol $the_result;
    $the_result = condition;
    $symbol $select_continuation_2;
    $symbol $select_value_3;
    $select_continuation_2 = $lambda ($state_0, $result_1)
        {
            $continuation(
                $state, 
                $the_result
                );
        };
    $select_value_3 = $the_result;
    if (($select_value_3 == $true)
        body(
            $state, 
            $select_continuation_2
            );
    else
        $select_continuation_2(
            $state, 
            $null
            );
}

$procedure standard_library::else_if_$expression($state, signal, body, condition, $continuation)
{
    $symbol $the_result;
    $the_result = signal;
    $symbol $select_continuation_2;
    $symbol $select_value_3;
    $select_continuation_2 = $lambda ($state_0, $result_1)
        {
            $continuation(
                $state, 
                $the_result
                );
        };
    $select_value_3 = $the_result;
    if (($select_value_3 == $false)
        condition(
            $state, 
            $lambda ($state_4, $result_5)
                {
                    $the_result = $result_5;
                    $symbol $select_continuation_8;
                    $symbol $select_value_9;
                    $select_continuation_8 = $select_continuation_2;
                    $select_value_9 = $the_result;
                    if (($select_value_9 == $true)
                        body(
                            $state_4, 
                            $select_continuation_8
                            );
                    else
                        $select_continuation_8(
                            $state_4, 
                            $null
                            );
                }
            );
    else
        $select_continuation_2(
            $state, 
            $null
            );
}

$procedure standard_library::else($state, signal, body, $continuation)
{
    $symbol $the_result;
    $the_result = signal;
    $symbol $select_continuation_2;
    $symbol $select_value_3;
    $select_continuation_2 = $lambda ($state_0, $result_1)
        {
            $continuation(
                $state, 
                $the_result
                );
        };
    $select_value_3 = $the_result;
    if (($select_value_3 == $false)
        body(
            $state, 
            $select_continuation_2
            );
    else
        $select_continuation_2(
            $state, 
            $null
            );
}

$procedure standard_library::try(state, body, $continuation)
{
    $symbol $the_result;
    standard_library::trap_$expression(
        state, 
        $lambda ($state_0, $continuation_1)
            body(
                $state_0, 
                $lambda ($state_2, $result_3)
                    {
                        $continuation_1(
                            $state_0, 
                            $result_3
                            );
                    }
                );, 
        $lambda ($state_4, $result_5)
            {
                $symbol $select_continuation_8;
                $symbol $select_value_9;
                $select_continuation_8 = $lambda ($state_6, $result_7)
                    {
                        $continuation(
                            state, 
                            $the_result
                            );
                    };
                $select_value_9 = state.flag;
                if (($select_value_9 == standard_library::raising_exception)
                    {
                        $the_result = state.argument;
                        standard_library::reset_continuation_state_$expression_to_$expression(
                            $state_4, 
                            state, 
                            $null, 
                            $select_continuation_8
                            );
                    }
                else
                    standard_library::fall_into_the_previous_trap(
                        $state_4, 
                        $select_continuation_8
                        );
            }
        );
}

$procedure standard_library::else_try(state, signal, body, $continuation)
{
    $symbol $the_result;
    standard_library::if_$expression(
        state, 
        $lambda ($state_2, $continuation_3)
            standard_library::trap_$expression(
                $state_2, 
                $lambda ($state_4, $continuation_5)
                    body(
                        $state_4, 
                        $lambda ($state_6, $result_7)
                            {
                                $continuation_5(
                                    $state_4, 
                                    $result_7
                                    );
                            }
                        );, 
                $lambda ($state_8, $result_9)
                    {
                        $symbol $select_continuation_12;
                        $symbol $select_value_13;
                        $select_continuation_12 = $continuation_3;
                        $select_value_13 = state.flag;
                        if (($select_value_13 == standard_library::raising_exception)
                            {
                                $the_result = state.argument;
                                standard_library::reset_continuation_state_$expression_to_$expression(
                                    $state_8, 
                                    state, 
                                    $null, 
                                    $select_continuation_12
                                    );
                            }
                        else
                            standard_library::fall_into_the_previous_trap(
                                $state_8, 
                                $select_continuation_12
                                );
                    }
                );, 
        (signal != $null), 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::catch_$argument(state, signal, body, $continuation)
{
    $symbol $the_result;
    standard_library::if_$expression(
        state, 
        body, 
        (signal != $null), 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::finally(state, signal, body, $continuation)
{
    $symbol $the_result;
    body(
        state, 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::named_block_$argument(state, body, $continuation)
{
    $symbol $the_result;
    $symbol handle;
    handle = new $Object();
    $symbol $state_0;
    $state_0 = state;
    standard_library::trap_$expression(
        $state_0, 
        $lambda ($state_2, $continuation_3)
            body(
                $state_2, 
                handle, 
                $lambda ($state_4, $result_5)
                    {
                        $continuation_3(
                            $state_2, 
                            $result_5
                            );
                    }
                );, 
        $lambda ($state_6, $result_7)
            {
                standard_library::if_$expression(
                    $state_6, 
                    $lambda ($state_10, $continuation_11)
                        standard_library::reset_continuation_state_$expression_to_$expression(
                            $state_10, 
                            state, 
                            $null, 
                            $continuation_11
                            );, 
                    ((state.flag == standard_library::exiting_block) && (state.argument == handle)), 
                    $lambda ($state_8, $result_9)
                        {
                            standard_library::else_if_$expression(
                                $state_8, 
                                $result_9, 
                                standard_library::fall_into_the_previous_trap, 
                                $lambda ($state_14, $continuation_15)
                                    $continuation_15(
                                        $state_14, 
                                        (state.flag != $null)
                                        );, 
                                $lambda ($state_16, $result_17)
                                    {
                                        $continuation(
                                            state, 
                                            $the_result
                                            );
                                    }
                                );
                        }
                    );
            }
        );
}

$procedure standard_library::add_$expression_to_assignable($state, value, $read_variable, $write_variable, $continuation)
{
    $symbol $the_result;
    $read_variable(
        $state, 
        $lambda ($state_0, $result_1)
            {
                $write_variable(
                    $state_0, 
                    ($result_1 + value), 
                    $lambda ($state_2, $result_3)
                        {
                            $continuation(
                                $state, 
                                $the_result
                                );
                        }
                    );
            }
        );
}

$procedure standard_library::substract_$expression_from_assignable($state, value, $read_variable, $write_variable, $continuation)
{
    $symbol $the_result;
    $read_variable(
        $state, 
        $lambda ($state_0, $result_1)
            {
                $write_variable(
                    $state_0, 
                    ($result_1 - value), 
                    $lambda ($state_2, $result_3)
                        {
                            $continuation(
                                $state, 
                                $the_result
                                );
                        }
                    );
            }
        );
}

$procedure standard_library::boolean_of_$primitive($state, value, $continuation)
{
    $symbol $the_result;
    $external ("CastToBoolean")(
        $state, 
        value, 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::integer_of_$primitive($state, value, $continuation)
{
    $symbol $the_result;
    $external ("CastToInteger")(
        $state, 
        value, 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::floating_point_of_$primitive($state, value, $continuation)
{
    $symbol $the_result;
    $external ("CastToFloat")(
        $state, 
        value, 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::string_of_$primitive($state, value, $continuation)
{
    $symbol $the_result;
    $external ("CastToString")(
        $state, 
        value, 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$symbol standard_library::raising_exception;

$symbol standard_library::exiting_program;

$symbol standard_library::exiting_block;

$type standard_library::continuation_trap
{
    $symbol continuation;
    $symbol previous_trap;
}

$type standard_library::continuation_fall_back_argument
{
    $symbol value;
    $symbol trap;
    $symbol fall_back_counter;
}

$type standard_library::continuation_state
{
    $symbol flag;
    $symbol argument;
    $symbol continuation;
    $symbol trap;
}

$procedure standard_library::reset_continuation_state_$expression_to_$expression($state, state, flag, $continuation)
{
    $symbol $the_result;
    state.flag = flag;
    state.argument = $null;
    state.continuation = $null;
    $continuation(
        $state, 
        $the_result
        );
}

$procedure standard_library::enable_fall_back_to_$expression_with_$expression_and_$expression($state, state, continuation, value, $continuation)
{
    $symbol $the_result;
    state.continuation = continuation;
    state.argument = new standard_library::continuation_fall_back_argument(value, state.trap);
    $continuation(
        $state, 
        $the_result
        );
}

$procedure standard_library::fall_back_counter_between_$expression_and_$expression_from_$primitive($state, top_trap, current_trap, counter, $continuation)
{
    $symbol $the_result;
    $symbol $select_continuation_2;
    $symbol $select_value_3;
    $select_continuation_2 = $lambda ($state_0, $result_1)
        {
            $continuation(
                $state, 
                $the_result
                );
        };
    $select_value_3 = (top_trap != current_trap);
    if (($select_value_3 == $true)
        standard_library::fall_back_counter_between_$expression_and_$expression_from_$primitive(
            $state, 
            top_trap.previous_trap, 
            current_trap, 
            (counter + 1), 
            $lambda ($state_4, $result_5)
                {
                    $the_result = $result_5;
                    $select_continuation_2(
                        $state_4, 
                        $result_5
                        );
                }
            );
    else
        if (($select_value_3 == $false)
            {
                $the_result = counter;
                $select_continuation_2(
                    $state, 
                    $null
                    );
            }
        else
            $select_continuation_2(
                $state, 
                $null
                );
}

$procedure standard_library::set_fall_back_counter_of_$expression($state, state, $continuation)
{
    $symbol $the_result;
    $symbol top_trap;
    top_trap = state.argument.trap;
    $symbol $state_0;
    $state_0 = $state;
    $symbol current_trap;
    current_trap = state.trap;
    $symbol $state_2;
    $state_2 = $state_0;
    standard_library::fall_back_counter_between_$expression_and_$expression_from_$primitive(
        $state_2, 
        top_trap, 
        current_trap, 
        -1, 
        $lambda ($state_4, $result_5)
            {
                $symbol counter;
                counter = $result_5;
                state.argument.fall_back_counter = counter;
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::restored_trap_$expression_with_fall_back_$expression_and_counter_$primitive($state, trap, fall_back_trap, counter, $continuation)
{
    $symbol $the_result;
    $symbol $select_continuation_2;
    $symbol $select_value_3;
    $select_continuation_2 = $lambda ($state_0, $result_1)
        {
            $continuation(
                $state, 
                $the_result
                );
        };
    $select_value_3 = counter;
    if (($select_value_3 == 0)
        {
            $the_result = trap;
            $select_continuation_2(
                $state, 
                $null
                );
        }
    else
        standard_library::restored_trap_$expression_with_fall_back_$expression_and_counter_$primitive(
            $state, 
            trap, 
            fall_back_trap.previous_trap, 
            (counter - 1), 
            $lambda ($state_4, $result_5)
                {
                    $symbol previous_trap;
                    previous_trap = $result_5;
                    $the_result = new standard_library::continuation_trap(fall_back_trap.continuation, previous_trap);
                    $select_continuation_2(
                        $state_4, 
                        $result_5
                        );
                }
            );
}

$procedure standard_library::call_$expression($state, value, $continuation)
{
    $symbol $the_result;
    $continuation(
        $state, 
        $the_result
        );
}

$procedure standard_library::trap_$expression_internal(state, value, continuation)
{
    $symbol $the_result;
    $symbol the_current_trap;
    the_current_trap = new standard_library::continuation_trap(continuation, state.trap);
    $symbol $state_0;
    $state_0 = state;
    state.trap = the_current_trap;
    value(
        $state_0, 
        $lambda ($state_2, $result_3)
            {
                $the_result = $result_3;
                continuation(
                    state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::trap_$expression(state, value, continuation)
{
    $symbol $the_result;
    standard_library::trap_$expression_internal(
        state, 
        value, 
        $lambda ($state_0, $result_1)
            {
                state.trap = state.trap.previous_trap;
                continuation(
                    state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::trap_$expression_with_fall_back_enabled_internal(state, value, continuation)
{
    $symbol $the_result;
    $symbol the_current_trap;
    the_current_trap = new standard_library::continuation_trap(continuation, state.trap);
    $symbol $state_0;
    $state_0 = state;
    state.trap = the_current_trap;
    value(
        $state_0, 
        $lambda ($state_2, $result_3)
            {
                $the_result = $result_3;
                continuation(
                    state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::trap_$expression_with_fall_back_enabled(state, value, continuation)
{
    $symbol $the_result;
    standard_library::trap_$expression_with_fall_back_enabled_internal(
        state, 
        value, 
        $lambda ($state_0, $result_1)
            {
                state.trap = state.trap.previous_trap;
                standard_library::set_fall_back_counter_of_$expression(
                    $state_0, 
                    state, 
                    $lambda ($state_2, $result_3)
                        {
                            continuation(
                                state, 
                                $the_result
                                );
                        }
                    );
            }
        );
}

$procedure standard_library::trap_$expression_with_fall_back_$expression_restored_internal(state, value, fall_back, continuation)
{
    $symbol $the_result;
    $symbol the_current_trap;
    the_current_trap = new standard_library::continuation_trap(continuation, state.trap);
    $symbol $state_0;
    $state_0 = state;
    standard_library::restored_trap_$expression_with_fall_back_$expression_and_counter_$primitive(
        $state_0, 
        the_current_trap, 
        fall_back.trap, 
        fall_back.fall_back_counter, 
        $lambda ($state_2, $result_3)
            {
                $symbol new_trap;
                new_trap = $result_3;
                state.trap = new_trap;
                value(
                    $state_2, 
                    $lambda ($state_4, $result_5)
                        {
                            $the_result = $result_5;
                            continuation(
                                state, 
                                $the_result
                                );
                        }
                    );
            }
        );
}

$symbol standard_library::breaking_repeating;

$symbol standard_library::continuing_repeating;

$symbol enumerable::yielding_return;

$symbol enumerable::yielding_break;

$type enumerable::enumerable_collection
{
    $symbol body;
}

$type enumerable::collection_enumerator
{
    $symbol current_yielding_result;
    $symbol body;
    $symbol continuation;
}

$procedure enumerable::yield_return_$expression(state, value, continuation)
{
    $symbol $the_result;
    standard_library::reset_continuation_state_$expression_to_$expression(
        state, 
        state, 
        enumerable::yielding_return, 
        $lambda ($state_0, $result_1)
            {
                standard_library::enable_fall_back_to_$expression_with_$expression_and_$expression(
                    $state_0, 
                    state, 
                    continuation, 
                    value, 
                    $lambda ($state_2, $result_3)
                        {
                            standard_library::fall_into_the_previous_trap(
                                $state_2, 
                                $lambda ($state_4, $result_5)
                                    {
                                        continuation(
                                            state, 
                                            $the_result
                                            );
                                    }
                                );
                        }
                    );
            }
        );
}

$procedure enumerable::yield_break(state, continuation)
{
    $symbol $the_result;
    standard_library::reset_continuation_state_$expression_to_$expression(
        state, 
        state, 
        enumerable::yielding_break, 
        $lambda ($state_0, $result_1)
            {
                standard_library::fall_into_the_previous_trap(
                    $state_0, 
                    $lambda ($state_2, $result_3)
                        {
                            continuation(
                                state, 
                                $the_result
                                );
                        }
                    );
            }
        );
}

$procedure enumerable::new_enumerator_from_$primitive($state, enumerable, $continuation)
{
    $symbol $the_result;
    $the_result = new enumerable::collection_enumerator($null, enumerable.body, $null);
    $continuation(
        $state, 
        $the_result
        );
}

$procedure enumerable::move_$expression_to_the_next(state, enumerator, continuation)
{
    $symbol $the_result;
    standard_library::named_block_$argument(
        state, 
        $lambda ($state_2, moving_to_the_next, $continuation_3)
            standard_library::if_$expression(
                $state_2, 
                $lambda ($state_6, $continuation_7)
                    standard_library::trap_$expression_with_fall_back_enabled(
                        $state_6, 
                        $lambda ($state_8, $continuation_9)
                            enumerator.body(
                                $state_8, 
                                $lambda ($state_10, $result_11)
                                    {
                                        $continuation_9(
                                            $state_8, 
                                            $result_11
                                            );
                                    }
                                );, 
                        $lambda ($state_12, $result_13)
                            {
                                enumerator.body = $null;
                                $continuation_7(
                                    $state_12, 
                                    $result_13
                                    );
                            }
                        );, 
                (enumerator.body != $null), 
                $lambda ($state_4, $result_5)
                    {
                        standard_library::else_if_$expression(
                            $state_4, 
                            $result_5, 
                            $lambda ($state_18, $continuation_19)
                                standard_library::trap_$expression_with_fall_back_$expression_restored(
                                    $state_18, 
                                    $lambda ($state_20, $continuation_21)
                                        {
                                            enumerator.continuation(
                                                $state_20, 
                                                $null
                                                );
                                        }, 
                                    enumerator.current_yielding_result, 
                                    $continuation_19
                                    );, 
                            $lambda ($state_14, $continuation_15)
                                $continuation_15(
                                    $state_14, 
                                    (enumerator.continuation != $null)
                                    );, 
                            $lambda ($state_16, $result_17)
                                {
                                    standard_library::else(
                                        $state_16, 
                                        $result_17, 
                                        $lambda ($state_28, $continuation_29)
                                            standard_library::exit_block_$expression(
                                                $state_28, 
                                                moving_to_the_next, 
                                                $continuation_29
                                                );, 
                                        $lambda ($state_26, $result_27)
                                            {
                                                $symbol $select_continuation_34;
                                                $symbol $select_value_35;
                                                $select_continuation_34 = $continuation_3;
                                                $select_value_35 = state.flag;
                                                if (($select_value_35 == enumerable::yielding_return)
                                                    {
                                                        enumerator.current_yielding_result = state.argument;
                                                        enumerator.continuation = state.continuation;
                                                        standard_library::reset_continuation_state_$expression_to_$expression(
                                                            $state_26, 
                                                            state, 
                                                            $null, 
                                                            $select_continuation_34
                                                            );
                                                    }
                                                else
                                                    if (($select_value_35 == enumerable::yielding_break)
                                                        {
                                                            enumerator.current_yielding_result = $null;
                                                            enumerator.continuation = $null;
                                                            standard_library::reset_continuation_state_$expression_to_$expression(
                                                                $state_26, 
                                                                state, 
                                                                $null, 
                                                                $select_continuation_34
                                                                );
                                                        }
                                                    else
                                                        if (($select_value_35 == $null)
                                                            {
                                                                enumerator.current_yielding_result = $null;
                                                                enumerator.continuation = $null;
                                                                $select_continuation_34(
                                                                    $state_26, 
                                                                    $null
                                                                    );
                                                            }
                                                        else
                                                            standard_library::fall_into_the_previous_trap(
                                                                $state_26, 
                                                                $select_continuation_34
                                                                );
                                            }
                                        );
                                }
                            );
                    }
                );, 
        $lambda ($state_0, $result_1)
            {
                continuation(
                    state, 
                    $the_result
                    );
            }
        );
}

$procedure enumerable::$primitive_reaches_the_end($state, enumerator, $continuation)
{
    $symbol $the_result;
    $the_result = ((enumerator.body == $null) && (enumerator.continuation == $null));
    $continuation(
        $state, 
        $the_result
        );
}

$procedure enumerable::current_value_of_$primitive($state, enumerator, $continuation)
{
    $symbol $the_result;
    enumerable::$primitive_reaches_the_end(
        $state, 
        enumerator, 
        $lambda ($state_0, $result_1)
            {
                $symbol $select_continuation_4;
                $symbol $select_value_5;
                $select_continuation_4 = $lambda ($state_2, $result_3)
                    {
                        $continuation(
                            $state, 
                            $the_result
                            );
                    };
                $select_value_5 = $result_1;
                if (($select_value_5 == $true)
                    {
                        $the_result = $null;
                        $select_continuation_4(
                            $state_0, 
                            $null
                            );
                    }
                else
                    if (($select_value_5 == $false)
                        {
                            $the_result = enumerator.current_yielding_result.value;
                            $select_continuation_4(
                                $state_0, 
                                $null
                                );
                        }
                    else
                        $select_continuation_4(
                            $state_0, 
                            $null
                            );
            }
        );
}

$procedure enumerable::create_enumerable_to_assignable(state, body, $read_receiver, $write_receiver, $continuation)
{
    $symbol $the_result;
    $write_receiver(
        state, 
        new enumerable::enumerable_collection(), 
        $lambda ($state_0, $result_1)
            {
                $read_receiver(
                    $state_0, 
                    $lambda ($state_2, $result_3)
                        {
                            $result_3.body = body;
                            $continuation(
                                state, 
                                $the_result
                                );
                        }
                    );
            }
        );
}

$procedure enumerable::repeat_with_$argument_in_$expression<enumerable_collection>($state, deal_with_$expression, items, $continuation)
{
    $symbol $the_result;
    enumerable::new_enumerator_from_$primitive(
        $state, 
        items, 
        $lambda ($state_0, $result_1)
            {
                $symbol enumerator;
                enumerator = $result_1;
                standard_library::repeat(
                    $state_0, 
                    $lambda ($state_4, $continuation_5)
                        enumerable::move_$expression_to_the_next(
                            $state_4, 
                            enumerator, 
                            $lambda ($state_6, $result_7)
                                {
                                    enumerable::current_value_of_$primitive(
                                        $state_6, 
                                        enumerator, 
                                        $lambda ($state_8, $result_9)
                                            {
                                                deal_with_$expression(
                                                    $state_8, 
                                                    $result_9, 
                                                    $continuation_5
                                                    );
                                            }
                                        );
                                }
                            );, 
                    $lambda ($state_2, $result_3)
                        {
                            $continuation(
                                $state, 
                                $the_result
                                );
                        }
                    );
            }
        );
}

$procedure enumerable::print_$expression($state, message, $continuation)
{
    $symbol $the_result;
    $external ("Print")(
        $state, 
        message, 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure enumerable::main($state, $continuation)
{
    $symbol $the_result;
    $symbol numbers;
    enumerable::create_enumerable_to_assignable(
        $state, 
        $lambda ($state_7, $continuation_8)
            standard_library::repeat_with_$argument_from_$expression_to_$expression(
                $state_7, 
                $lambda ($state_11, i, $continuation_12)
                    enumerable::print_$expression(
                        $state_11, 
                        ("Enumerating " & i), 
                        $lambda ($state_13, $result_14)
                            {
                                enumerable::yield_return_$expression(
                                    $state_13, 
                                    i, 
                                    $continuation_12
                                    );
                            }
                        );, 
                1, 
                10, 
                $continuation_8
                );, 
        $lambda ($state_0, $continuation_1)
            $continuation_1(
                $state_0, 
                numbers
                );, 
        $lambda ($state_2, $input_3, $continuation_4)
            {
                numbers = $input_3;
                $continuation_4(
                    $state_2, 
                    $null
                    );
            }, 
        $lambda ($state_5, $result_6)
            {
                standard_library::repeat_with_$argument_in_$expression(
                    $state_5, 
                    $lambda ($state_19, number, $continuation_20)
                        standard_library::if_$expression(
                            $state_19, 
                            standard_library::break, 
                            (number >= 5), 
                            $lambda ($state_21, $result_22)
                                {
                                    enumerable::print_$expression(
                                        $state_21, 
                                        ("Printing " & number), 
                                        $continuation_20
                                        );
                                }
                            );, 
                    numbers, 
                    $lambda ($state_17, $result_18)
                        {
                            $continuation(
                                $state, 
                                $the_result
                                );
                        }
                    );
            }
        );
}

$procedure $dispatch_fail<>standard_library::repeat_with_$argument_in_$expression($state, deal_with_$expression, items, $continuation)
{
    $symbol $the_result;
    standard_library::raise_$expression(
        $state, 
        "Only enumerable object (like containers) can be iterated using the repeat-with-in statement.", 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure ($Array).$dispatch<>standard_library::repeat_with_$argument_in_$expression($state, deal_with_$expression, items, $continuation)
{
    standard_library::repeat_with_$argument_in_$expression<array>(
        $state, 
        deal_with_$expression, 
        items, 
        $continuation
        );
}

$procedure (enumerable::enumerable_collection).$dispatch<>standard_library::repeat_with_$argument_in_$expression($state, deal_with_$expression, items, $continuation)
{
    enumerable::repeat_with_$argument_in_$expression<enumerable_collection>(
        $state, 
        deal_with_$expression, 
        items, 
        $continuation
        );
}

$procedure ($Object).$dispatch<>standard_library::repeat_with_$argument_in_$expression($state, deal_with_$expression, items, $continuation)
{
    $dispatch_fail<>standard_library::repeat_with_$argument_in_$expression(
        $state, 
        deal_with_$expression, 
        items, 
        $continuation
        );
}

