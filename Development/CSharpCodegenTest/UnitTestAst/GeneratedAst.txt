$symbol standard_library::exiting_block;

$type standard_library::continuation_trap
{
    $symbol continuation;
    $symbol previous_trap;
}

$type standard_library::continuation_fall_back_argument
{
    $symbol value;
    $symbol trap;
    $symbol fall_back_counter;
}

$type standard_library::continuation_state
{
    $symbol flag;
    $symbol argument;
    $symbol continuation;
    $symbol trap;
}

$type standard_library::continuation_coroutine
{
    $symbol body;
    $symbol continuation;
    $symbol trap;
    $symbol fall_back_counter;
}

$procedure standard_library::reset_continuation_state_$expression_to_$expression($state, state, flag, $continuation)
{
    $symbol $the_result;
    state.flag = flag;
    state.argument = $null;
    state.continuation = $null;
    $continuation(
        $state, 
        $the_result
        );
}

$procedure standard_library::call_$expression($state, value, $continuation)
{
    $symbol $the_result;
    $continuation(
        $state, 
        $the_result
        );
}

$procedure standard_library::trap_$expression_internal(state, value, continuation)
{
    $symbol $the_result;
    $symbol the_current_trap;
    the_current_trap = new standard_library::continuation_trap(continuation, state.trap);
    $symbol $state_0;
    $state_0 = state;
    state.trap = the_current_trap;
    value(
        $state_0, 
        $lambda ($state_2, $result_3)
            {
                $the_result = $result_3;
                continuation(
                    state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::trap_$expression(state, value, continuation)
{
    $symbol $the_result;
    standard_library::trap_$expression_internal(
        state, 
        value, 
        $lambda ($state_0, $result_1)
            {
                state.trap = state.trap.previous_trap;
                continuation(
                    state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::fall_into_the_previous_trap(state, continuation)
{
    $symbol the_current_trap;
    the_current_trap = state.trap.continuation;
    $symbol $state_0;
    $state_0 = state;
    the_current_trap(
        $state_0, 
        $null
        );
}

$procedure standard_library::enable_fall_back_to_$expression_with_$expression_and_$expression($state, state, continuation, value, $continuation)
{
    $symbol $the_result;
    state.continuation = continuation;
    state.argument = new standard_library::continuation_fall_back_argument(value, state.trap);
    $continuation(
        $state, 
        $the_result
        );
}

$procedure standard_library::fall_back_counter_between_$expression_and_$expression_from_$primitive($state, top_trap, current_trap, counter, $continuation)
{
    $symbol $the_result;
    $symbol $select_continuation_2;
    $symbol $select_value_3;
    $select_continuation_2 = $lambda ($state_0, $result_1)
        {
            $continuation(
                $state, 
                $the_result
                );
        };
    $select_value_3 = (top_trap != current_trap);
    if (($select_value_3 == $true)
        standard_library::fall_back_counter_between_$expression_and_$expression_from_$primitive(
            $state, 
            top_trap.previous_trap, 
            current_trap, 
            (counter + 1), 
            $lambda ($state_4, $result_5)
                {
                    $the_result = $result_5;
                    $select_continuation_2(
                        $state_4, 
                        $result_5
                        );
                }
            );
    else
        if (($select_value_3 == $false)
            {
                $the_result = counter;
                $select_continuation_2(
                    $state, 
                    $null
                    );
            }
        else
            $select_continuation_2(
                $state, 
                $null
                );
}

$procedure standard_library::set_fall_back_counter_of_$expression($state, state, $continuation)
{
    $symbol $the_result;
    $symbol top_trap;
    top_trap = state.argument.trap;
    $symbol $state_0;
    $state_0 = $state;
    $symbol current_trap;
    current_trap = state.trap;
    $symbol $state_2;
    $state_2 = $state_0;
    standard_library::fall_back_counter_between_$expression_and_$expression_from_$primitive(
        $state_2, 
        top_trap, 
        current_trap, 
        -1, 
        $lambda ($state_4, $result_5)
            {
                $symbol counter;
                counter = $result_5;
                state.argument.fall_back_counter = counter;
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::restored_trap_$expression_with_fall_back_$expression_and_counter_$primitive($state, trap, fall_back_trap, counter, $continuation)
{
    $symbol $the_result;
    $symbol $select_continuation_2;
    $symbol $select_value_3;
    $select_continuation_2 = $lambda ($state_0, $result_1)
        {
            $continuation(
                $state, 
                $the_result
                );
        };
    $select_value_3 = counter;
    if (($select_value_3 == 0)
        {
            $the_result = trap;
            $select_continuation_2(
                $state, 
                $null
                );
        }
    else
        standard_library::restored_trap_$expression_with_fall_back_$expression_and_counter_$primitive(
            $state, 
            trap, 
            fall_back_trap.previous_trap, 
            (counter - 1), 
            $lambda ($state_4, $result_5)
                {
                    $symbol previous_trap;
                    previous_trap = $result_5;
                    $the_result = new standard_library::continuation_trap(fall_back_trap.continuation, previous_trap);
                    $select_continuation_2(
                        $state_4, 
                        $result_5
                        );
                }
            );
}

$procedure standard_library::trap_$expression_with_fall_back_enabled_internal(state, value, continuation)
{
    $symbol $the_result;
    $symbol the_current_trap;
    the_current_trap = new standard_library::continuation_trap(continuation, state.trap);
    $symbol $state_0;
    $state_0 = state;
    state.trap = the_current_trap;
    value(
        $state_0, 
        $lambda ($state_2, $result_3)
            {
                $the_result = $result_3;
                continuation(
                    state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::trap_$expression_with_fall_back_enabled(state, value, continuation)
{
    $symbol $the_result;
    standard_library::trap_$expression_with_fall_back_enabled_internal(
        state, 
        value, 
        $lambda ($state_0, $result_1)
            {
                state.trap = state.trap.previous_trap;
                standard_library::set_fall_back_counter_of_$expression(
                    $state_0, 
                    state, 
                    $lambda ($state_2, $result_3)
                        {
                            continuation(
                                state, 
                                $the_result
                                );
                        }
                    );
            }
        );
}

$procedure standard_library::trap_$expression_with_fall_back_$expression_restored_internal(state, value, fall_back, continuation)
{
    $symbol $the_result;
    $symbol the_current_trap;
    the_current_trap = new standard_library::continuation_trap(continuation, state.trap);
    $symbol $state_0;
    $state_0 = state;
    standard_library::restored_trap_$expression_with_fall_back_$expression_and_counter_$primitive(
        $state_0, 
        the_current_trap, 
        fall_back.trap, 
        fall_back.fall_back_counter, 
        $lambda ($state_2, $result_3)
            {
                $symbol new_trap;
                new_trap = $result_3;
                state.trap = new_trap;
                value(
                    $state_2, 
                    $lambda ($state_4, $result_5)
                        {
                            $the_result = $result_5;
                            continuation(
                                state, 
                                $the_result
                                );
                        }
                    );
            }
        );
}

$procedure standard_library::trap_$expression_with_fall_back_$expression_restored(state, value, fall_back, continuation)
{
    $symbol $the_result;
    standard_library::trap_$expression_with_fall_back_$expression_restored_internal(
        state, 
        value, 
        fall_back, 
        $lambda ($state_0, $result_1)
            {
                state.trap = state.trap.previous_trap;
                standard_library::set_fall_back_counter_of_$expression(
                    $state_0, 
                    state, 
                    $lambda ($state_2, $result_3)
                        {
                            continuation(
                                state, 
                                $the_result
                                );
                        }
                    );
            }
        );
}

$procedure standard_library::create_closure_to_assignable($state, body, $read_closure, $write_closure, $continuation)
{
    $symbol $the_result;
    $write_closure(
        $state, 
        body, 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::new_coroutine_from_$primitive($state, body, $continuation)
{
    $symbol $the_result;
    $the_result = new standard_library::continuation_coroutine();
    $the_result.body = body;
    $continuation(
        $state, 
        $the_result
        );
}

$procedure standard_library::coroutine_$expression_stopped($state, coroutine, $continuation)
{
    $symbol $the_result;
    $the_result = ((coroutine.body == $null) && (coroutine.continuation == $null));
    $continuation(
        $state, 
        $the_result
        );
}

$procedure standard_library::run_coroutine_$expression(state, coroutine, continuation)
{
    $symbol $the_result;
    $symbol need_to_exit;
    need_to_exit = $false;
    $symbol $state_0;
    $state_0 = state;
    standard_library::if_$expression(
        $state_0, 
        $lambda ($state_4, $continuation_5)
            standard_library::trap_$expression_with_fall_back_enabled(
                $state_4, 
                $lambda ($state_6, $continuation_7)
                    coroutine.body(
                        $state_6, 
                        $lambda ($state_8, $result_9)
                            {
                                $continuation_7(
                                    $state_6, 
                                    $result_9
                                    );
                            }
                        );, 
                $lambda ($state_10, $result_11)
                    {
                        coroutine.body = $null;
                        $continuation_5(
                            $state_10, 
                            $result_11
                            );
                    }
                );, 
        (coroutine.body != $null), 
        $lambda ($state_2, $result_3)
            {
                standard_library::else_if_$expression(
                    $state_2, 
                    $result_3, 
                    $lambda ($state_16, $continuation_17)
                        standard_library::trap_$expression_with_fall_back_$expression_restored(
                            $state_16, 
                            $lambda ($state_18, $continuation_19)
                                {
                                    coroutine.continuation(
                                        $state_18, 
                                        $null
                                        );
                                }, 
                            coroutine, 
                            $continuation_17
                            );, 
                    $lambda ($state_12, $continuation_13)
                        $continuation_13(
                            $state_12, 
                            (coroutine.continuation != $null)
                            );, 
                    $lambda ($state_14, $result_15)
                        {
                            standard_library::else(
                                $state_14, 
                                $result_15, 
                                $lambda ($state_26, $continuation_27)
                                    {
                                        need_to_exit = $true;
                                        $continuation_27(
                                            $state_26, 
                                            $null
                                            );
                                    }, 
                                $lambda ($state_24, $result_25)
                                    {
                                        standard_library::if_$expression(
                                            $state_24, 
                                            $lambda ($state_30, $continuation_31)
                                                {
                                                    coroutine.trap = state.argument.trap;
                                                    coroutine.fall_back_counter = state.argument.fall_back_counter;
                                                    $continuation_31(
                                                        $state_30, 
                                                        $null
                                                        );
                                                }, 
                                            (!need_to_exit && (state.argument is standard_library::continuation_fall_back_argument)), 
                                            $lambda ($state_28, $result_29)
                                                {
                                                    continuation(
                                                        state, 
                                                        $the_result
                                                        );
                                                }
                                            );
                                    }
                                );
                        }
                    );
            }
        );
}

$procedure standard_library::continue_coroutine_$expression(state, coroutine, continuation)
{
    $symbol $the_result;
    coroutine.continuation = state.continuation;
    standard_library::reset_continuation_state_$expression_to_$expression(
        state, 
        state, 
        $null, 
        $lambda ($state_0, $result_1)
            {
                continuation(
                    state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::stop_coroutine_$expression(state, coroutine, continuation)
{
    $symbol $the_result;
    coroutine.continuation = $null;
    standard_library::reset_continuation_state_$expression_to_$expression(
        state, 
        state, 
        $null, 
        $lambda ($state_0, $result_1)
            {
                continuation(
                    state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::pause_coroutine_to_$expression_with_$expression_and_$expression(state, flag, coroutine_continuation, value, continuation)
{
    $symbol $the_result;
    standard_library::reset_continuation_state_$expression_to_$expression(
        state, 
        state, 
        flag, 
        $lambda ($state_0, $result_1)
            {
                standard_library::enable_fall_back_to_$expression_with_$expression_and_$expression(
                    $state_0, 
                    state, 
                    coroutine_continuation, 
                    value, 
                    $lambda ($state_2, $result_3)
                        {
                            standard_library::fall_into_the_previous_trap(
                                $state_2, 
                                $lambda ($state_4, $result_5)
                                    {
                                        continuation(
                                            state, 
                                            $the_result
                                            );
                                    }
                                );
                        }
                    );
            }
        );
}

$procedure standard_library::break(state, continuation)
{
    $symbol $the_result;
    standard_library::reset_continuation_state_$expression_to_$expression(
        state, 
        state, 
        standard_library::breaking_repeating, 
        $lambda ($state_0, $result_1)
            {
                standard_library::fall_into_the_previous_trap(
                    $state_0, 
                    $lambda ($state_2, $result_3)
                        {
                            continuation(
                                state, 
                                $the_result
                                );
                        }
                    );
            }
        );
}

$procedure standard_library::continue(state, continuation)
{
    $symbol $the_result;
    standard_library::reset_continuation_state_$expression_to_$expression(
        state, 
        state, 
        standard_library::continuing_repeating, 
        $lambda ($state_0, $result_1)
            {
                standard_library::fall_into_the_previous_trap(
                    $state_0, 
                    $lambda ($state_2, $result_3)
                        {
                            continuation(
                                state, 
                                $the_result
                                );
                        }
                    );
            }
        );
}

$procedure standard_library::repeat(state, body, $continuation)
{
    $symbol $the_result;
    standard_library::trap_$expression(
        state, 
        $lambda ($state_0, $continuation_1)
            body(
                $state_0, 
                $lambda ($state_2, $result_3)
                    {
                        $continuation_1(
                            $state_0, 
                            $result_3
                            );
                    }
                );, 
        $lambda ($state_4, $result_5)
            {
                $symbol $select_continuation_8;
                $symbol $select_value_9;
                $select_continuation_8 = $lambda ($state_6, $result_7)
                    {
                        $continuation(
                            state, 
                            $the_result
                            );
                    };
                $select_value_9 = state.flag;
                if (($select_value_9 == standard_library::breaking_repeating)
                    standard_library::reset_continuation_state_$expression_to_$expression(
                        $state_4, 
                        state, 
                        $null, 
                        $select_continuation_8
                        );
                else
                    if (($select_value_9 == standard_library::continuing_repeating)
                        standard_library::reset_continuation_state_$expression_to_$expression(
                            $state_4, 
                            state, 
                            $null, 
                            $lambda ($state_12, $result_13)
                                {
                                    standard_library::repeat(
                                        $state_12, 
                                        body, 
                                        $lambda ($state_14, $result_15)
                                            {
                                                standard_library::call_$expression(
                                                    $state_14, 
                                                    $result_15, 
                                                    $select_continuation_8
                                                    );
                                            }
                                        );
                                }
                            );
                    else
                        if (($select_value_9 == $null)
                            {
                                standard_library::repeat(
                                    $state_4, 
                                    body, 
                                    $lambda ($state_18, $result_19)
                                        {
                                            standard_library::call_$expression(
                                                $state_18, 
                                                $result_19, 
                                                $select_continuation_8
                                                );
                                        }
                                    );
                            }
                        else
                            standard_library::fall_into_the_previous_trap(
                                $state_4, 
                                $select_continuation_8
                                );
            }
        );
}

$procedure standard_library::repeat_while_$expression($state, body, condition, $continuation)
{
    $symbol $the_result;
    standard_library::repeat(
        $state, 
        $lambda ($state_2, $continuation_3)
            {
                condition(
                    $state_2, 
                    $lambda ($state_4, $result_5)
                        {
                            standard_library::if_$expression(
                                $state_4, 
                                standard_library::break, 
                                !$result_5, 
                                $lambda ($state_6, $result_7)
                                    {
                                        body(
                                            $state_6, 
                                            $continuation_3
                                            );
                                    }
                                );
                        }
                    );
            }, 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::repeat_with_$argument_from_$expression_to_$expression($state, deal_with_$expression, lower_bound, upper_bound, $continuation)
{
    $symbol $the_result;
    $symbol the_current_number;
    the_current_number = (lower_bound - 1);
    $symbol $state_0;
    $state_0 = $state;
    standard_library::repeat_while_$expression(
        $state_0, 
        $lambda ($state_6, $continuation_7)
            standard_library::add_$expression_to_assignable(
                $state_6, 
                1, 
                $lambda ($state_8, $continuation_9)
                    $continuation_9(
                        $state_8, 
                        the_current_number
                        );, 
                $lambda ($state_10, $input_11, $continuation_12)
                    {
                        the_current_number = $input_11;
                        $continuation_12(
                            $state_10, 
                            $null
                            );
                    }, 
                $lambda ($state_13, $result_14)
                    {
                        deal_with_$expression(
                            $state_13, 
                            the_current_number, 
                            $continuation_7
                            );
                    }
                );, 
        $lambda ($state_2, $continuation_3)
            $continuation_3(
                $state_2, 
                (the_current_number < upper_bound)
                );, 
        $lambda ($state_4, $result_5)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::repeat_with_$argument_in_$expression($state, deal_with_$expression, items, $continuation)
{
    items.$dispatch<>standard_library::repeat_with_$argument_in_$expression(
        $state, 
        deal_with_$expression, 
        items, 
        $continuation
        );
}

$procedure standard_library::repeat_with_$argument_in_$expression<array>($state, deal_with_$expression, items, $continuation)
{
    $symbol $the_result;
    standard_library::repeat_with_$argument_from_$expression_to_$expression(
        $state, 
        $lambda ($state_2, index, $continuation_3)
            deal_with_$expression(
                $state_2, 
                items[index], 
                $continuation_3
                );, 
        1, 
        $ArrayLength(items), 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::if_$expression($state, body, condition, $continuation)
{
    $symbol $the_result;
    $the_result = condition;
    $symbol $select_continuation_2;
    $symbol $select_value_3;
    $select_continuation_2 = $lambda ($state_0, $result_1)
        {
            $continuation(
                $state, 
                $the_result
                );
        };
    $select_value_3 = $the_result;
    if (($select_value_3 == $true)
        body(
            $state, 
            $select_continuation_2
            );
    else
        $select_continuation_2(
            $state, 
            $null
            );
}

$procedure standard_library::else_if_$expression($state, signal, body, condition, $continuation)
{
    $symbol $the_result;
    $the_result = signal;
    $symbol $select_continuation_2;
    $symbol $select_value_3;
    $select_continuation_2 = $lambda ($state_0, $result_1)
        {
            $continuation(
                $state, 
                $the_result
                );
        };
    $select_value_3 = $the_result;
    if (($select_value_3 == $false)
        condition(
            $state, 
            $lambda ($state_4, $result_5)
                {
                    $the_result = $result_5;
                    $symbol $select_continuation_8;
                    $symbol $select_value_9;
                    $select_continuation_8 = $select_continuation_2;
                    $select_value_9 = $the_result;
                    if (($select_value_9 == $true)
                        body(
                            $state_4, 
                            $select_continuation_8
                            );
                    else
                        $select_continuation_8(
                            $state_4, 
                            $null
                            );
                }
            );
    else
        $select_continuation_2(
            $state, 
            $null
            );
}

$procedure standard_library::else($state, signal, body, $continuation)
{
    $symbol $the_result;
    $the_result = signal;
    $symbol $select_continuation_2;
    $symbol $select_value_3;
    $select_continuation_2 = $lambda ($state_0, $result_1)
        {
            $continuation(
                $state, 
                $the_result
                );
        };
    $select_value_3 = $the_result;
    if (($select_value_3 == $false)
        body(
            $state, 
            $select_continuation_2
            );
    else
        $select_continuation_2(
            $state, 
            $null
            );
}

$procedure standard_library::raise_$expression(state, exception, continuation)
{
    $symbol $the_result;
    standard_library::reset_continuation_state_$expression_to_$expression(
        state, 
        state, 
        standard_library::raising_exception, 
        $lambda ($state_0, $result_1)
            {
                state.argument = exception;
                standard_library::fall_into_the_previous_trap(
                    $state_0, 
                    $lambda ($state_2, $result_3)
                        {
                            continuation(
                                state, 
                                $the_result
                                );
                        }
                    );
            }
        );
}

$procedure standard_library::try(state, body, $continuation)
{
    $symbol $the_result;
    standard_library::trap_$expression(
        state, 
        $lambda ($state_0, $continuation_1)
            body(
                $state_0, 
                $lambda ($state_2, $result_3)
                    {
                        $continuation_1(
                            $state_0, 
                            $result_3
                            );
                    }
                );, 
        $lambda ($state_4, $result_5)
            {
                $symbol $select_continuation_8;
                $symbol $select_value_9;
                $select_continuation_8 = $lambda ($state_6, $result_7)
                    {
                        $continuation(
                            state, 
                            $the_result
                            );
                    };
                $select_value_9 = state.flag;
                if (($select_value_9 == standard_library::raising_exception)
                    {
                        $the_result = state.argument;
                        standard_library::reset_continuation_state_$expression_to_$expression(
                            $state_4, 
                            state, 
                            $null, 
                            $select_continuation_8
                            );
                    }
                else
                    if (($select_value_9 == $null)
                        $select_continuation_8(
                            $state_4, 
                            $null
                            );
                    else
                        standard_library::fall_into_the_previous_trap(
                            $state_4, 
                            $select_continuation_8
                            );
            }
        );
}

$procedure standard_library::else_try(state, signal, body, $continuation)
{
    $symbol $the_result;
    standard_library::if_$expression(
        state, 
        $lambda ($state_2, $continuation_3)
            standard_library::trap_$expression(
                $state_2, 
                $lambda ($state_4, $continuation_5)
                    body(
                        $state_4, 
                        $lambda ($state_6, $result_7)
                            {
                                $continuation_5(
                                    $state_4, 
                                    $result_7
                                    );
                            }
                        );, 
                $lambda ($state_8, $result_9)
                    {
                        $symbol $select_continuation_12;
                        $symbol $select_value_13;
                        $select_continuation_12 = $continuation_3;
                        $select_value_13 = state.flag;
                        if (($select_value_13 == standard_library::raising_exception)
                            {
                                $the_result = state.argument;
                                standard_library::reset_continuation_state_$expression_to_$expression(
                                    $state_8, 
                                    state, 
                                    $null, 
                                    $select_continuation_12
                                    );
                            }
                        else
                            if (($select_value_13 == $null)
                                $select_continuation_12(
                                    $state_8, 
                                    $null
                                    );
                            else
                                standard_library::fall_into_the_previous_trap(
                                    $state_8, 
                                    $select_continuation_12
                                    );
                    }
                );, 
        (signal != $null), 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::catch_$argument(state, signal, deal_with_$expression, $continuation)
{
    $symbol $the_result;
    standard_library::if_$expression(
        state, 
        $lambda ($state_2, $continuation_3)
            deal_with_$expression(
                $state_2, 
                signal, 
                $continuation_3
                );, 
        (signal != $null), 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::finally(state, signal, body, $continuation)
{
    $symbol $the_result;
    body(
        state, 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::exit_program(state, continuation)
{
    $symbol $the_result;
    standard_library::reset_continuation_state_$expression_to_$expression(
        state, 
        state, 
        standard_library::exiting_program, 
        $lambda ($state_0, $result_1)
            {
                standard_library::fall_into_the_previous_trap(
                    $state_0, 
                    $lambda ($state_2, $result_3)
                        {
                            continuation(
                                state, 
                                $the_result
                                );
                        }
                    );
            }
        );
}

$procedure standard_library::exit_block_$expression(state, handle, continuation)
{
    $symbol $the_result;
    standard_library::reset_continuation_state_$expression_to_$expression(
        state, 
        state, 
        standard_library::exiting_block, 
        $lambda ($state_0, $result_1)
            {
                state.argument = handle;
                standard_library::fall_into_the_previous_trap(
                    $state_0, 
                    $lambda ($state_2, $result_3)
                        {
                            continuation(
                                state, 
                                $the_result
                                );
                        }
                    );
            }
        );
}

$procedure standard_library::named_block_$argument(state, body, $continuation)
{
    $symbol $the_result;
    $symbol handle;
    handle = new $Object();
    $symbol $state_0;
    $state_0 = state;
    standard_library::trap_$expression(
        $state_0, 
        $lambda ($state_2, $continuation_3)
            body(
                $state_2, 
                handle, 
                $lambda ($state_4, $result_5)
                    {
                        $continuation_3(
                            $state_2, 
                            $result_5
                            );
                    }
                );, 
        $lambda ($state_6, $result_7)
            {
                standard_library::if_$expression(
                    $state_6, 
                    $lambda ($state_10, $continuation_11)
                        standard_library::reset_continuation_state_$expression_to_$expression(
                            $state_10, 
                            state, 
                            $null, 
                            $continuation_11
                            );, 
                    ((state.flag == standard_library::exiting_block) && (state.argument == handle)), 
                    $lambda ($state_8, $result_9)
                        {
                            standard_library::else_if_$expression(
                                $state_8, 
                                $result_9, 
                                standard_library::fall_into_the_previous_trap, 
                                $lambda ($state_14, $continuation_15)
                                    $continuation_15(
                                        $state_14, 
                                        (state.flag != $null)
                                        );, 
                                $lambda ($state_16, $result_17)
                                    {
                                        $continuation(
                                            state, 
                                            $the_result
                                            );
                                    }
                                );
                        }
                    );
            }
        );
}

$procedure standard_library::add_$expression_to_assignable($state, value, $read_variable, $write_variable, $continuation)
{
    $symbol $the_result;
    $read_variable(
        $state, 
        $lambda ($state_0, $result_1)
            {
                $write_variable(
                    $state_0, 
                    ($result_1 + value), 
                    $lambda ($state_2, $result_3)
                        {
                            $continuation(
                                $state, 
                                $the_result
                                );
                        }
                    );
            }
        );
}

$procedure standard_library::substract_$expression_from_assignable($state, value, $read_variable, $write_variable, $continuation)
{
    $symbol $the_result;
    $read_variable(
        $state, 
        $lambda ($state_0, $result_1)
            {
                $write_variable(
                    $state_0, 
                    ($result_1 - value), 
                    $lambda ($state_2, $result_3)
                        {
                            $continuation(
                                $state, 
                                $the_result
                                );
                        }
                    );
            }
        );
}

$procedure standard_library::number_of_$primitive($state, value, $continuation)
{
    value.$dispatch<>standard_library::number_of_$primitive(
        $state, 
        value, 
        $continuation
        );
}

$procedure standard_library::number_of_$primitive<integer>($state, value, $continuation)
{
    $symbol $the_result;
    $the_result = value;
    $continuation(
        $state, 
        $the_result
        );
}

$procedure standard_library::number_of_$primitive<float>($state, value, $continuation)
{
    $symbol $the_result;
    $the_result = value;
    $continuation(
        $state, 
        $the_result
        );
}

$procedure standard_library::number_of_$primitive<string>($state, value, $continuation)
{
    $symbol $the_result;
    $external ("s_to_n")(
        $state, 
        value, 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::integer_of_$primitive($state, value, $continuation)
{
    value.$dispatch<>standard_library::integer_of_$primitive(
        $state, 
        value, 
        $continuation
        );
}

$procedure standard_library::integer_of_$primitive<integer>($state, value, $continuation)
{
    $symbol $the_result;
    $the_result = value;
    $continuation(
        $state, 
        $the_result
        );
}

$procedure standard_library::integer_of_$primitive<float>($state, value, $continuation)
{
    $symbol $the_result;
    $external ("f_to_i")(
        $state, 
        value, 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::integer_of_$primitive<string>($state, value, $continuation)
{
    $symbol $the_result;
    $external ("s_to_i")(
        $state, 
        value, 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::float_of_$primitive($state, value, $continuation)
{
    value.$dispatch<>standard_library::float_of_$primitive(
        $state, 
        value, 
        $continuation
        );
}

$procedure standard_library::float_of_$primitive<integer>($state, value, $continuation)
{
    $symbol $the_result;
    $external ("i_to_f")(
        $state, 
        value, 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::float_of_$primitive<float>($state, value, $continuation)
{
    $symbol $the_result;
    $the_result = value;
    $continuation(
        $state, 
        $the_result
        );
}

$procedure standard_library::float_of_$primitive<string>($state, value, $continuation)
{
    $symbol $the_result;
    $external ("s_to_f")(
        $state, 
        value, 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::string_of_$primitive($state, value, $continuation)
{
    $symbol $the_result;
    $external ("to_s")(
        $state, 
        value, 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::operator_POS_$primitive($state, value, $continuation)
{
    value.$dispatch<>standard_library::operator_POS_$primitive(
        $state, 
        value, 
        $continuation
        );
}

$procedure standard_library::operator_POS_$primitive<integer>($state, value, $continuation)
{
    $symbol $the_result;
    $external ("+i")(
        $state, 
        value, 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::operator_POS_$primitive<float>($state, value, $continuation)
{
    $symbol $the_result;
    $external ("+f")(
        $state, 
        value, 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::operator_NEG_$primitive($state, value, $continuation)
{
    value.$dispatch<>standard_library::operator_NEG_$primitive(
        $state, 
        value, 
        $continuation
        );
}

$procedure standard_library::operator_NEG_$primitive<integer>($state, value, $continuation)
{
    $symbol $the_result;
    $external ("-i")(
        $state, 
        value, 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::operator_NEG_$primitive<float>($state, value, $continuation)
{
    $symbol $the_result;
    $external ("-f")(
        $state, 
        value, 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::operator_NOT_$primitive($state, value, $continuation)
{
    value.$dispatch<>standard_library::operator_NOT_$primitive(
        $state, 
        value, 
        $continuation
        );
}

$procedure standard_library::operator_NOT_$primitive<boolean>($state, value, $continuation)
{
    $symbol $the_result;
    $external ("!b")(
        $state, 
        value, 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::operator_$expression_CONCAT_$primitive($state, a, b, $continuation)
{
    a.$dispatch<>standard_library::operator_$expression_CONCAT_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure standard_library::operator_$expression<string>_CONCAT_$primitive<string>($state, a, b, $continuation)
{
    $symbol $the_result;
    $external ("s&s")(
        $state, 
        a, 
        b, 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::operator_$expression_ADD_$primitive($state, a, b, $continuation)
{
    a.$dispatch<>standard_library::operator_$expression_ADD_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure standard_library::operator_$expression<integer>_ADD_$primitive<integer>($state, a, b, $continuation)
{
    $symbol $the_result;
    $external ("i+i")(
        $state, 
        a, 
        b, 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::operator_$expression<float>_ADD_$primitive<float>($state, a, b, $continuation)
{
    $symbol $the_result;
    $external ("f+f")(
        $state, 
        a, 
        b, 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::operator_$expression<integer>_ADD_$primitive<float>($state, a, b, $continuation)
{
    $symbol $the_result;
    standard_library::float_of_$primitive(
        $state, 
        a, 
        $lambda ($state_0, $result_1)
            {
                $the_result = ($result_1 + b);
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::operator_$expression<float>_ADD_$primitive<integer>($state, a, b, $continuation)
{
    $symbol $the_result;
    $symbol $var_2;
    $var_2 = a;
    standard_library::float_of_$primitive(
        $state, 
        b, 
        $lambda ($state_0, $result_1)
            {
                $the_result = ($var_2 + $result_1);
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::operator_$expression_SUB_$primitive($state, a, b, $continuation)
{
    a.$dispatch<>standard_library::operator_$expression_SUB_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure standard_library::operator_$expression<integer>_SUB_$primitive<integer>($state, a, b, $continuation)
{
    $symbol $the_result;
    $external ("i-i")(
        $state, 
        a, 
        b, 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::operator_$expression<float>_SUB_$primitive<float>($state, a, b, $continuation)
{
    $symbol $the_result;
    $external ("f-f")(
        $state, 
        a, 
        b, 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::operator_$expression<integer>_SUB_$primitive<float>($state, a, b, $continuation)
{
    $symbol $the_result;
    standard_library::float_of_$primitive(
        $state, 
        a, 
        $lambda ($state_0, $result_1)
            {
                $the_result = ($result_1 - b);
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::operator_$expression<float>_SUB_$primitive<integer>($state, a, b, $continuation)
{
    $symbol $the_result;
    $symbol $var_2;
    $var_2 = a;
    standard_library::float_of_$primitive(
        $state, 
        b, 
        $lambda ($state_0, $result_1)
            {
                $the_result = ($var_2 - $result_1);
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::operator_$expression_MUL_$primitive($state, a, b, $continuation)
{
    a.$dispatch<>standard_library::operator_$expression_MUL_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure standard_library::operator_$expression<integer>_MUL_$primitive<integer>($state, a, b, $continuation)
{
    $symbol $the_result;
    $external ("i*i")(
        $state, 
        a, 
        b, 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::operator_$expression<float>_MUL_$primitive<float>($state, a, b, $continuation)
{
    $symbol $the_result;
    $external ("f*f")(
        $state, 
        a, 
        b, 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::operator_$expression<integer>_MUL_$primitive<float>($state, a, b, $continuation)
{
    $symbol $the_result;
    standard_library::float_of_$primitive(
        $state, 
        a, 
        $lambda ($state_0, $result_1)
            {
                $the_result = ($result_1 * b);
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::operator_$expression<float>_MUL_$primitive<integer>($state, a, b, $continuation)
{
    $symbol $the_result;
    $symbol $var_2;
    $var_2 = a;
    standard_library::float_of_$primitive(
        $state, 
        b, 
        $lambda ($state_0, $result_1)
            {
                $the_result = ($var_2 * $result_1);
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::operator_$expression_DIV_$primitive($state, a, b, $continuation)
{
    a.$dispatch<>standard_library::operator_$expression_DIV_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure standard_library::operator_$expression<integer>_DIV_$primitive<integer>($state, a, b, $continuation)
{
    $symbol $the_result;
    $external ("i/i")(
        $state, 
        a, 
        b, 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::operator_$expression<float>_DIV_$primitive<float>($state, a, b, $continuation)
{
    $symbol $the_result;
    $external ("f/f")(
        $state, 
        a, 
        b, 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::operator_$expression<integer>_DIV_$primitive<float>($state, a, b, $continuation)
{
    $symbol $the_result;
    standard_library::float_of_$primitive(
        $state, 
        a, 
        $lambda ($state_0, $result_1)
            {
                $the_result = ($result_1 / b);
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::operator_$expression<float>_DIV_$primitive<integer>($state, a, b, $continuation)
{
    $symbol $the_result;
    $symbol $var_2;
    $var_2 = a;
    standard_library::float_of_$primitive(
        $state, 
        b, 
        $lambda ($state_0, $result_1)
            {
                $the_result = ($var_2 / $result_1);
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::operator_$expression_INTDIV_$primitive($state, a, b, $continuation)
{
    a.$dispatch<>standard_library::operator_$expression_INTDIV_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure standard_library::operator_$expression<integer>_INTDIV_$primitive<integer>($state, a, b, $continuation)
{
    $symbol $the_result;
    $external ("ii")(
        $state, 
        a, 
        b, 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::operator_$expression<float>_INTDIV_$primitive<float>($state, a, b, $continuation)
{
    $symbol $the_result;
    $external ("ff")(
        $state, 
        a, 
        b, 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::operator_$expression<integer>_INTDIV_$primitive<float>($state, a, b, $continuation)
{
    $symbol $the_result;
    standard_library::float_of_$primitive(
        $state, 
        a, 
        $lambda ($state_0, $result_1)
            {
                $the_result = ($result_1 \ b);
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::operator_$expression<float>_INTDIV_$primitive<integer>($state, a, b, $continuation)
{
    $symbol $the_result;
    $symbol $var_2;
    $var_2 = a;
    standard_library::float_of_$primitive(
        $state, 
        b, 
        $lambda ($state_0, $result_1)
            {
                $the_result = ($var_2 \ $result_1);
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::operator_$expression_MOD_$primitive($state, a, b, $continuation)
{
    a.$dispatch<>standard_library::operator_$expression_MOD_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure standard_library::operator_$expression<integer>_MOD_$primitive<integer>($state, a, b, $continuation)
{
    $symbol $the_result;
    $external ("i%i")(
        $state, 
        a, 
        b, 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::operator_$expression<float>_MOD_$primitive<float>($state, a, b, $continuation)
{
    $symbol $the_result;
    $external ("f%f")(
        $state, 
        a, 
        b, 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::operator_$expression<integer>_MOD_$primitive<float>($state, a, b, $continuation)
{
    $symbol $the_result;
    standard_library::float_of_$primitive(
        $state, 
        a, 
        $lambda ($state_0, $result_1)
            {
                $the_result = ($result_1 % b);
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::operator_$expression<float>_MOD_$primitive<integer>($state, a, b, $continuation)
{
    $symbol $the_result;
    $symbol $var_2;
    $var_2 = a;
    standard_library::float_of_$primitive(
        $state, 
        b, 
        $lambda ($state_0, $result_1)
            {
                $the_result = ($var_2 % $result_1);
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::operator_$expression_EQUAL_$primitive($state, a, b, $continuation)
{
    a.$dispatch<>standard_library::operator_$expression_EQUAL_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure standard_library::operator_$expression<integer>_EQUAL_$primitive<integer>($state, a, b, $continuation)
{
    $symbol $the_result;
    $external ("i_e_i")(
        $state, 
        a, 
        b, 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::operator_$expression<float>_EQUAL_$primitive<float>($state, a, b, $continuation)
{
    $symbol $the_result;
    $external ("f_e_f")(
        $state, 
        a, 
        b, 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::operator_$expression<string>_EQUAL_$primitive<string>($state, a, b, $continuation)
{
    $symbol $the_result;
    $external ("s_e_s")(
        $state, 
        a, 
        b, 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::operator_$expression<boolean>_EQUAL_$primitive<boolean>($state, a, b, $continuation)
{
    $symbol $the_result;
    $external ("b_e_b")(
        $state, 
        a, 
        b, 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::operator_$expression<integer>_EQUAL_$primitive<float>($state, a, b, $continuation)
{
    $symbol $the_result;
    $symbol $var_2;
    $var_2 = standard_library::operator_$expression_EQUAL_$primitive;
    standard_library::float_of_$primitive(
        $state, 
        a, 
        $lambda ($state_0, $result_1)
            {
                $var_2(
                    $state_0, 
                    $result_1, 
                    b, 
                    $lambda ($state_3, $result_4)
                        {
                            $the_result = $result_4;
                            $continuation(
                                $state, 
                                $the_result
                                );
                        }
                    );
            }
        );
}

$procedure standard_library::operator_$expression<float>_EQUAL_$primitive<integer>($state, a, b, $continuation)
{
    $symbol $the_result;
    $symbol $var_2;
    $var_2 = standard_library::operator_$expression_EQUAL_$primitive;
    $symbol $var_3;
    $var_3 = a;
    standard_library::float_of_$primitive(
        $state, 
        b, 
        $lambda ($state_0, $result_1)
            {
                $var_2(
                    $state_0, 
                    $var_3, 
                    $result_1, 
                    $lambda ($state_4, $result_5)
                        {
                            $the_result = $result_5;
                            $continuation(
                                $state, 
                                $the_result
                                );
                        }
                    );
            }
        );
}

$procedure standard_library::operator_$expression<string>_EQUAL_$primitive($state, a, b, $continuation)
{
    $symbol $the_result;
    $symbol $var_2;
    $var_2 = standard_library::operator_$expression_EQUAL_$primitive;
    $symbol $var_3;
    $var_3 = a;
    standard_library::string_of_$primitive(
        $state, 
        b, 
        $lambda ($state_0, $result_1)
            {
                $var_2(
                    $state_0, 
                    $var_3, 
                    $result_1, 
                    $lambda ($state_4, $result_5)
                        {
                            $the_result = $result_5;
                            $continuation(
                                $state, 
                                $the_result
                                );
                        }
                    );
            }
        );
}

$procedure standard_library::operator_$expression_EQUAL_$primitive<string>($state, a, b, $continuation)
{
    $symbol $the_result;
    $symbol $var_2;
    $var_2 = standard_library::operator_$expression_EQUAL_$primitive;
    standard_library::string_of_$primitive(
        $state, 
        a, 
        $lambda ($state_0, $result_1)
            {
                $var_2(
                    $state_0, 
                    $result_1, 
                    b, 
                    $lambda ($state_3, $result_4)
                        {
                            $the_result = $result_4;
                            $continuation(
                                $state, 
                                $the_result
                                );
                        }
                    );
            }
        );
}

$procedure standard_library::operator_$expression_COMPARE_$primitive($state, a, b, $continuation)
{
    a.$dispatch<>standard_library::operator_$expression_COMPARE_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure standard_library::operator_$expression<integer>_COMPARE_$primitive<integer>($state, a, b, $continuation)
{
    $symbol $the_result;
    $external ("i_c_i")(
        $state, 
        a, 
        b, 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::operator_$expression<float>_COMPARE_$primitive<float>($state, a, b, $continuation)
{
    $symbol $the_result;
    $external ("f_c_f")(
        $state, 
        a, 
        b, 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::operator_$expression<string>_COMPARE_$primitive<string>($state, a, b, $continuation)
{
    $symbol $the_result;
    $external ("s_c_s")(
        $state, 
        a, 
        b, 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::operator_$expression<integer>_COMPARE_$primitive<float>($state, a, b, $continuation)
{
    $symbol $the_result;
    $symbol $var_2;
    $var_2 = standard_library::operator_$expression_COMPARE_$primitive;
    standard_library::float_of_$primitive(
        $state, 
        a, 
        $lambda ($state_0, $result_1)
            {
                $var_2(
                    $state_0, 
                    $result_1, 
                    b, 
                    $lambda ($state_3, $result_4)
                        {
                            $the_result = $result_4;
                            $continuation(
                                $state, 
                                $the_result
                                );
                        }
                    );
            }
        );
}

$symbol standard_library::breaking_repeating;

$symbol standard_library::continuing_repeating;

$symbol standard_library::raising_exception;

$symbol standard_library::exiting_program;

$procedure standard_library::operator_$expression<float>_COMPARE_$primitive<integer>($state, a, b, $continuation)
{
    $symbol $the_result;
    $symbol $var_2;
    $var_2 = standard_library::operator_$expression_COMPARE_$primitive;
    $symbol $var_3;
    $var_3 = a;
    standard_library::float_of_$primitive(
        $state, 
        b, 
        $lambda ($state_0, $result_1)
            {
                $var_2(
                    $state_0, 
                    $var_3, 
                    $result_1, 
                    $lambda ($state_4, $result_5)
                        {
                            $the_result = $result_5;
                            $continuation(
                                $state, 
                                $the_result
                                );
                        }
                    );
            }
        );
}

$procedure standard_library::operator_$expression<string>_COMPARE_$primitive($state, a, b, $continuation)
{
    $symbol $the_result;
    $symbol $var_2;
    $var_2 = standard_library::operator_$expression_COMPARE_$primitive;
    $symbol $var_3;
    $var_3 = a;
    standard_library::string_of_$primitive(
        $state, 
        b, 
        $lambda ($state_0, $result_1)
            {
                $var_2(
                    $state_0, 
                    $var_3, 
                    $result_1, 
                    $lambda ($state_4, $result_5)
                        {
                            $the_result = $result_5;
                            $continuation(
                                $state, 
                                $the_result
                                );
                        }
                    );
            }
        );
}

$procedure standard_library::operator_$expression_COMPARE_$primitive<string>($state, a, b, $continuation)
{
    $symbol $the_result;
    $symbol $var_2;
    $var_2 = standard_library::operator_$expression_COMPARE_$primitive;
    standard_library::string_of_$primitive(
        $state, 
        a, 
        $lambda ($state_0, $result_1)
            {
                $var_2(
                    $state_0, 
                    $result_1, 
                    b, 
                    $lambda ($state_3, $result_4)
                        {
                            $the_result = $result_4;
                            $continuation(
                                $state, 
                                $the_result
                                );
                        }
                    );
            }
        );
}

$procedure standard_library::operator_$expression_LT_$primitive($state, a, b, $continuation)
{
    $symbol $the_result;
    standard_library::operator_$expression_COMPARE_$primitive(
        $state, 
        a, 
        b, 
        $lambda ($state_0, $result_1)
            {
                $the_result = ($result_1 == -1);
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::operator_$expression_GT_$primitive($state, a, b, $continuation)
{
    $symbol $the_result;
    standard_library::operator_$expression_COMPARE_$primitive(
        $state, 
        a, 
        b, 
        $lambda ($state_0, $result_1)
            {
                $the_result = ($result_1 == 1);
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::operator_$expression_LE_$primitive($state, a, b, $continuation)
{
    $symbol $the_result;
    standard_library::operator_$expression_COMPARE_$primitive(
        $state, 
        a, 
        b, 
        $lambda ($state_0, $result_1)
            {
                $the_result = ($result_1 != 1);
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::operator_$expression_GE_$primitive($state, a, b, $continuation)
{
    $symbol $the_result;
    standard_library::operator_$expression_COMPARE_$primitive(
        $state, 
        a, 
        b, 
        $lambda ($state_0, $result_1)
            {
                $the_result = ($result_1 != -1);
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::operator_$expression_EQ_$primitive($state, a, b, $continuation)
{
    $symbol $the_result;
    standard_library::operator_$expression_EQUAL_$primitive(
        $state, 
        a, 
        b, 
        $lambda ($state_0, $result_1)
            {
                $the_result = $result_1;
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::operator_$expression_NE_$primitive($state, a, b, $continuation)
{
    $symbol $the_result;
    standard_library::operator_$expression_EQUAL_$primitive(
        $state, 
        a, 
        b, 
        $lambda ($state_0, $result_1)
            {
                $the_result = !$result_1;
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::operator_$expression_AND_$primitive($state, a, b, $continuation)
{
    a.$dispatch<>standard_library::operator_$expression_AND_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure standard_library::operator_$expression<boolean>_AND_$primitive<boolean>($state, a, b, $continuation)
{
    $symbol $the_result;
    $external ("b&&b")(
        $state, 
        a, 
        b, 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure standard_library::operator_$expression_OR_$primitive($state, a, b, $continuation)
{
    a.$dispatch<>standard_library::operator_$expression_OR_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure standard_library::operator_$expression<boolean>_OR_$primitive<boolean>($state, a, b, $continuation)
{
    $symbol $the_result;
    $external ("b||b")(
        $state, 
        a, 
        b, 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure unit_test::print_$expression($state, message, $continuation)
{
    $symbol $the_result;
    $external ("Print")(
        $state, 
        message, 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure unit_test::test_case_$expression($state, run_the_test_case, name, $continuation)
{
    $symbol $the_result;
    standard_library::try(
        $state, 
        $lambda ($state_2, $continuation_3)
            run_the_test_case(
                $state_2, 
                $lambda ($state_4, $result_5)
                    {
                        unit_test::print_$expression(
                            $state_4, 
                            ("PASS: " & name), 
                            $continuation_3
                            );
                    }
                );, 
        $lambda ($state_0, $result_1)
            {
                standard_library::catch_$argument(
                    $state_0, 
                    $result_1, 
                    $lambda ($state_10, exception, $continuation_11)
                        {
                            $symbol $select_continuation_14;
                            $symbol $select_value_15;
                            $select_continuation_14 = $continuation_11;
                            $select_value_15 = exception;
                            if (($select_value_15 == "AssertionFailure")
                                unit_test::print_$expression(
                                    $state_10, 
                                    ("FAIL: " & name), 
                                    $select_continuation_14
                                    );
                            else
                                unit_test::print_$expression(
                                    $state_10, 
                                    ("HALT: " & name), 
                                    $select_continuation_14
                                    );
                        }, 
                    $lambda ($state_8, $result_9)
                        {
                            $continuation(
                                $state, 
                                $the_result
                                );
                        }
                    );
            }
        );
}

$procedure unit_test::assert_$expression_should_be_$expression($state, actual_value, expected_value, $continuation)
{
    $symbol $the_result;
    standard_library::if_$expression(
        $state, 
        unit_test::assert_fail, 
        (actual_value != expected_value), 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure unit_test::assert_fail($state, $continuation)
{
    $symbol $the_result;
    standard_library::raise_$expression(
        $state, 
        "AssertionFailure", 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure unit_test::main($state, $continuation)
{
    $symbol $the_result;
    unit_test::test_case_$expression(
        $state, 
        $lambda ($state_2, $continuation_3)
            unit_test::assert_$expression_should_be_$expression(
                $state_2, 
                (1 + 1), 
                2, 
                $continuation_3
                );, 
        "1+1=2", 
        $lambda ($state_0, $result_1)
            {
                unit_test::test_case_$expression(
                    $state_0, 
                    $lambda ($state_8, $continuation_9)
                        {
                            $symbol sum;
                            sum = 0;
                            $symbol $state_10;
                            $state_10 = $state_8;
                            standard_library::repeat_with_$argument_from_$expression_to_$expression(
                                $state_10, 
                                $lambda ($state_14, i, $continuation_15)
                                    standard_library::if_$expression(
                                        $state_14, 
                                        standard_library::break, 
                                        (i > 10), 
                                        $lambda ($state_16, $result_17)
                                            {
                                                standard_library::add_$expression_to_assignable(
                                                    $state_16, 
                                                    i, 
                                                    $lambda ($state_22, $continuation_23)
                                                        $continuation_23(
                                                            $state_22, 
                                                            sum
                                                            );, 
                                                    $lambda ($state_24, $input_25, $continuation_26)
                                                        {
                                                            sum = $input_25;
                                                            $continuation_26(
                                                                $state_24, 
                                                                $null
                                                                );
                                                        }, 
                                                    $continuation_15
                                                    );
                                            }
                                        );, 
                                1, 
                                100, 
                                $lambda ($state_12, $result_13)
                                    {
                                        unit_test::assert_$expression_should_be_$expression(
                                            $state_12, 
                                            sum, 
                                            55, 
                                            $continuation_9
                                            );
                                    }
                                );
                        }, 
                    "Break should stop the repeating (1)", 
                    $lambda ($state_6, $result_7)
                        {
                            unit_test::test_case_$expression(
                                $state_6, 
                                $lambda ($state_33, $continuation_34)
                                    {
                                        $symbol sum;
                                        sum = 0;
                                        $symbol $state_35;
                                        $state_35 = $state_33;
                                        standard_library::repeat_with_$argument_from_$expression_to_$expression(
                                            $state_35, 
                                            $lambda ($state_39, i, $continuation_40)
                                                standard_library::add_$expression_to_assignable(
                                                    $state_39, 
                                                    i, 
                                                    $lambda ($state_41, $continuation_42)
                                                        $continuation_42(
                                                            $state_41, 
                                                            sum
                                                            );, 
                                                    $lambda ($state_43, $input_44, $continuation_45)
                                                        {
                                                            sum = $input_44;
                                                            $continuation_45(
                                                                $state_43, 
                                                                $null
                                                                );
                                                        }, 
                                                    $lambda ($state_46, $result_47)
                                                        {
                                                            standard_library::if_$expression(
                                                                $state_46, 
                                                                standard_library::break, 
                                                                (i >= 10), 
                                                                $continuation_40
                                                                );
                                                        }
                                                    );, 
                                            1, 
                                            100, 
                                            $lambda ($state_37, $result_38)
                                                {
                                                    unit_test::assert_$expression_should_be_$expression(
                                                        $state_37, 
                                                        sum, 
                                                        55, 
                                                        $continuation_34
                                                        );
                                                }
                                            );
                                    }, 
                                "Break should stop the repeating (2)", 
                                $lambda ($state_31, $result_32)
                                    {
                                        unit_test::test_case_$expression(
                                            $state_31, 
                                            $lambda ($state_58, $continuation_59)
                                                {
                                                    $symbol sum;
                                                    sum = 0;
                                                    $symbol $state_60;
                                                    $state_60 = $state_58;
                                                    standard_library::repeat_with_$argument_from_$expression_to_$expression(
                                                        $state_60, 
                                                        $lambda ($state_64, i, $continuation_65)
                                                            standard_library::if_$expression(
                                                                $state_64, 
                                                                standard_library::continue, 
                                                                (i > 10), 
                                                                $lambda ($state_66, $result_67)
                                                                    {
                                                                        standard_library::add_$expression_to_assignable(
                                                                            $state_66, 
                                                                            i, 
                                                                            $lambda ($state_72, $continuation_73)
                                                                                $continuation_73(
                                                                                    $state_72, 
                                                                                    sum
                                                                                    );, 
                                                                            $lambda ($state_74, $input_75, $continuation_76)
                                                                                {
                                                                                    sum = $input_75;
                                                                                    $continuation_76(
                                                                                        $state_74, 
                                                                                        $null
                                                                                        );
                                                                                }, 
                                                                            $continuation_65
                                                                            );
                                                                    }
                                                                );, 
                                                        1, 
                                                        100, 
                                                        $lambda ($state_62, $result_63)
                                                            {
                                                                unit_test::assert_$expression_should_be_$expression(
                                                                    $state_62, 
                                                                    sum, 
                                                                    55, 
                                                                    $continuation_59
                                                                    );
                                                            }
                                                        );
                                                }, 
                                            "Continue should restart the next repeating", 
                                            $lambda ($state_56, $result_57)
                                                {
                                                    unit_test::test_case_$expression(
                                                        $state_56, 
                                                        $lambda ($state_83, $continuation_84)
                                                            {
                                                                $symbol a;
                                                                a = 0;
                                                                $symbol $state_85;
                                                                $state_85 = $state_83;
                                                                $symbol b;
                                                                b = 0;
                                                                $symbol $state_87;
                                                                $state_87 = $state_85;
                                                                $symbol c;
                                                                c = 0;
                                                                $symbol $state_89;
                                                                $state_89 = $state_87;
                                                                standard_library::if_$expression(
                                                                    $state_89, 
                                                                    $lambda ($state_93, $continuation_94)
                                                                        {
                                                                            a = 1;
                                                                            $continuation_94(
                                                                                $state_93, 
                                                                                $null
                                                                                );
                                                                        }, 
                                                                    $true, 
                                                                    $lambda ($state_91, $result_92)
                                                                        {
                                                                            standard_library::else_if_$expression(
                                                                                $state_91, 
                                                                                $result_92, 
                                                                                $lambda ($state_99, $continuation_100)
                                                                                    {
                                                                                        a = 2;
                                                                                        $continuation_100(
                                                                                            $state_99, 
                                                                                            $null
                                                                                            );
                                                                                    }, 
                                                                                $lambda ($state_95, $continuation_96)
                                                                                    $continuation_96(
                                                                                        $state_95, 
                                                                                        $true
                                                                                        );, 
                                                                                $lambda ($state_97, $result_98)
                                                                                    {
                                                                                        standard_library::else(
                                                                                            $state_97, 
                                                                                            $result_98, 
                                                                                            $lambda ($state_103, $continuation_104)
                                                                                                {
                                                                                                    a = 3;
                                                                                                    $continuation_104(
                                                                                                        $state_103, 
                                                                                                        $null
                                                                                                        );
                                                                                                }, 
                                                                                            $lambda ($state_101, $result_102)
                                                                                                {
                                                                                                    standard_library::if_$expression(
                                                                                                        $state_101, 
                                                                                                        $lambda ($state_107, $continuation_108)
                                                                                                            {
                                                                                                                b = 1;
                                                                                                                $continuation_108(
                                                                                                                    $state_107, 
                                                                                                                    $null
                                                                                                                    );
                                                                                                            }, 
                                                                                                        $false, 
                                                                                                        $lambda ($state_105, $result_106)
                                                                                                            {
                                                                                                                standard_library::else_if_$expression(
                                                                                                                    $state_105, 
                                                                                                                    $result_106, 
                                                                                                                    $lambda ($state_113, $continuation_114)
                                                                                                                        {
                                                                                                                            b = 2;
                                                                                                                            $continuation_114(
                                                                                                                                $state_113, 
                                                                                                                                $null
                                                                                                                                );
                                                                                                                        }, 
                                                                                                                    $lambda ($state_109, $continuation_110)
                                                                                                                        $continuation_110(
                                                                                                                            $state_109, 
                                                                                                                            $true
                                                                                                                            );, 
                                                                                                                    $lambda ($state_111, $result_112)
                                                                                                                        {
                                                                                                                            standard_library::else(
                                                                                                                                $state_111, 
                                                                                                                                $result_112, 
                                                                                                                                $lambda ($state_117, $continuation_118)
                                                                                                                                    {
                                                                                                                                        b = 3;
                                                                                                                                        $continuation_118(
                                                                                                                                            $state_117, 
                                                                                                                                            $null
                                                                                                                                            );
                                                                                                                                    }, 
                                                                                                                                $lambda ($state_115, $result_116)
                                                                                                                                    {
                                                                                                                                        standard_library::if_$expression(
                                                                                                                                            $state_115, 
                                                                                                                                            $lambda ($state_121, $continuation_122)
                                                                                                                                                {
                                                                                                                                                    c = 1;
                                                                                                                                                    $continuation_122(
                                                                                                                                                        $state_121, 
                                                                                                                                                        $null
                                                                                                                                                        );
                                                                                                                                                }, 
                                                                                                                                            $false, 
                                                                                                                                            $lambda ($state_119, $result_120)
                                                                                                                                                {
                                                                                                                                                    standard_library::else_if_$expression(
                                                                                                                                                        $state_119, 
                                                                                                                                                        $result_120, 
                                                                                                                                                        $lambda ($state_127, $continuation_128)
                                                                                                                                                            {
                                                                                                                                                                c = 2;
                                                                                                                                                                $continuation_128(
                                                                                                                                                                    $state_127, 
                                                                                                                                                                    $null
                                                                                                                                                                    );
                                                                                                                                                            }, 
                                                                                                                                                        $lambda ($state_123, $continuation_124)
                                                                                                                                                            $continuation_124(
                                                                                                                                                                $state_123, 
                                                                                                                                                                $false
                                                                                                                                                                );, 
                                                                                                                                                        $lambda ($state_125, $result_126)
                                                                                                                                                            {
                                                                                                                                                                standard_library::else(
                                                                                                                                                                    $state_125, 
                                                                                                                                                                    $result_126, 
                                                                                                                                                                    $lambda ($state_131, $continuation_132)
                                                                                                                                                                        {
                                                                                                                                                                            c = 3;
                                                                                                                                                                            $continuation_132(
                                                                                                                                                                                $state_131, 
                                                                                                                                                                                $null
                                                                                                                                                                                );
                                                                                                                                                                        }, 
                                                                                                                                                                    $lambda ($state_129, $result_130)
                                                                                                                                                                        {
                                                                                                                                                                            unit_test::assert_$expression_should_be_$expression(
                                                                                                                                                                                $state_129, 
                                                                                                                                                                                a, 
                                                                                                                                                                                1, 
                                                                                                                                                                                $lambda ($state_133, $result_134)
                                                                                                                                                                                    {
                                                                                                                                                                                        unit_test::assert_$expression_should_be_$expression(
                                                                                                                                                                                            $state_133, 
                                                                                                                                                                                            b, 
                                                                                                                                                                                            2, 
                                                                                                                                                                                            $lambda ($state_135, $result_136)
                                                                                                                                                                                                {
                                                                                                                                                                                                    unit_test::assert_$expression_should_be_$expression(
                                                                                                                                                                                                        $state_135, 
                                                                                                                                                                                                        c, 
                                                                                                                                                                                                        3, 
                                                                                                                                                                                                        $continuation_84
                                                                                                                                                                                                        );
                                                                                                                                                                                                }
                                                                                                                                                                                            );
                                                                                                                                                                                    }
                                                                                                                                                                                );
                                                                                                                                                                        }
                                                                                                                                                                    );
                                                                                                                                                            }
                                                                                                                                                        );
                                                                                                                                                }
                                                                                                                                            );
                                                                                                                                    }
                                                                                                                                );
                                                                                                                        }
                                                                                                                    );
                                                                                                            }
                                                                                                        );
                                                                                                }
                                                                                            );
                                                                                    }
                                                                                );
                                                                        }
                                                                    );
                                                            }, 
                                                        "Only one branch of the if-else statement will be executed", 
                                                        $lambda ($state_81, $result_82)
                                                            {
                                                                unit_test::test_case_$expression(
                                                                    $state_81, 
                                                                    $lambda ($state_141, $continuation_142)
                                                                        {
                                                                            $symbol e;
                                                                            e = 0;
                                                                            $symbol $state_143;
                                                                            $state_143 = $state_141;
                                                                            standard_library::try(
                                                                                $state_143, 
                                                                                $lambda ($state_147, $continuation_148)
                                                                                    standard_library::raise_$expression(
                                                                                        $state_147, 
                                                                                        "exception", 
                                                                                        $lambda ($state_149, $result_150)
                                                                                            {
                                                                                                e = 0;
                                                                                                $continuation_148(
                                                                                                    $state_149, 
                                                                                                    $result_150
                                                                                                    );
                                                                                            }
                                                                                        );, 
                                                                                $lambda ($state_145, $result_146)
                                                                                    {
                                                                                        standard_library::catch_$argument(
                                                                                            $state_145, 
                                                                                            $result_146, 
                                                                                            $lambda ($state_153, exception, $continuation_154)
                                                                                                {
                                                                                                    e = exception;
                                                                                                    $continuation_154(
                                                                                                        $state_153, 
                                                                                                        $null
                                                                                                        );
                                                                                                }, 
                                                                                            $lambda ($state_151, $result_152)
                                                                                                {
                                                                                                    unit_test::assert_$expression_should_be_$expression(
                                                                                                        $state_151, 
                                                                                                        e, 
                                                                                                        "exception", 
                                                                                                        $continuation_142
                                                                                                        );
                                                                                                }
                                                                                            );
                                                                                    }
                                                                                );
                                                                        }, 
                                                                    "A raised exception should be able to catch", 
                                                                    $lambda ($state_139, $result_140)
                                                                        {
                                                                            unit_test::test_case_$expression(
                                                                                $state_139, 
                                                                                $lambda ($state_159, $continuation_160)
                                                                                    {
                                                                                        $symbol e;
                                                                                        e = 0;
                                                                                        $symbol $state_161;
                                                                                        $state_161 = $state_159;
                                                                                        standard_library::try(
                                                                                            $state_161, 
                                                                                            $lambda ($state_165, $continuation_166)
                                                                                                standard_library::add_$expression_to_assignable(
                                                                                                    $state_165, 
                                                                                                    1, 
                                                                                                    $lambda ($state_167, $continuation_168)
                                                                                                        $continuation_168(
                                                                                                            $state_167, 
                                                                                                            e
                                                                                                            );, 
                                                                                                    $lambda ($state_169, $input_170, $continuation_171)
                                                                                                        {
                                                                                                            e = $input_170;
                                                                                                            $continuation_171(
                                                                                                                $state_169, 
                                                                                                                $null
                                                                                                                );
                                                                                                        }, 
                                                                                                    $lambda ($state_172, $result_173)
                                                                                                        {
                                                                                                            standard_library::raise_$expression(
                                                                                                                $state_172, 
                                                                                                                "exception", 
                                                                                                                $lambda ($state_174, $result_175)
                                                                                                                    {
                                                                                                                        standard_library::add_$expression_to_assignable(
                                                                                                                            $state_174, 
                                                                                                                            2, 
                                                                                                                            $lambda ($state_176, $continuation_177)
                                                                                                                                $continuation_177(
                                                                                                                                    $state_176, 
                                                                                                                                    e
                                                                                                                                    );, 
                                                                                                                            $lambda ($state_178, $input_179, $continuation_180)
                                                                                                                                {
                                                                                                                                    e = $input_179;
                                                                                                                                    $continuation_180(
                                                                                                                                        $state_178, 
                                                                                                                                        $null
                                                                                                                                        );
                                                                                                                                }, 
                                                                                                                            $continuation_166
                                                                                                                            );
                                                                                                                    }
                                                                                                                );
                                                                                                        }
                                                                                                    );, 
                                                                                            $lambda ($state_163, $result_164)
                                                                                                {
                                                                                                    standard_library::catch_$argument(
                                                                                                        $state_163, 
                                                                                                        $result_164, 
                                                                                                        $lambda ($state_185, exception, $continuation_186)
                                                                                                            standard_library::add_$expression_to_assignable(
                                                                                                                $state_185, 
                                                                                                                4, 
                                                                                                                $lambda ($state_187, $continuation_188)
                                                                                                                    $continuation_188(
                                                                                                                        $state_187, 
                                                                                                                        e
                                                                                                                        );, 
                                                                                                                $lambda ($state_189, $input_190, $continuation_191)
                                                                                                                    {
                                                                                                                        e = $input_190;
                                                                                                                        $continuation_191(
                                                                                                                            $state_189, 
                                                                                                                            $null
                                                                                                                            );
                                                                                                                    }, 
                                                                                                                $continuation_186
                                                                                                                );, 
                                                                                                        $lambda ($state_183, $result_184)
                                                                                                            {
                                                                                                                standard_library::finally(
                                                                                                                    $state_183, 
                                                                                                                    $result_184, 
                                                                                                                    $lambda ($state_196, $continuation_197)
                                                                                                                        standard_library::add_$expression_to_assignable(
                                                                                                                            $state_196, 
                                                                                                                            8, 
                                                                                                                            $lambda ($state_198, $continuation_199)
                                                                                                                                $continuation_199(
                                                                                                                                    $state_198, 
                                                                                                                                    e
                                                                                                                                    );, 
                                                                                                                            $lambda ($state_200, $input_201, $continuation_202)
                                                                                                                                {
                                                                                                                                    e = $input_201;
                                                                                                                                    $continuation_202(
                                                                                                                                        $state_200, 
                                                                                                                                        $null
                                                                                                                                        );
                                                                                                                                }, 
                                                                                                                            $continuation_197
                                                                                                                            );, 
                                                                                                                    $lambda ($state_194, $result_195)
                                                                                                                        {
                                                                                                                            unit_test::assert_$expression_should_be_$expression(
                                                                                                                                $state_194, 
                                                                                                                                e, 
                                                                                                                                13, 
                                                                                                                                $continuation_160
                                                                                                                                );
                                                                                                                        }
                                                                                                                    );
                                                                                                            }
                                                                                                        );
                                                                                                }
                                                                                            );
                                                                                    }, 
                                                                                "Finally should always be executed", 
                                                                                $lambda ($state_157, $result_158)
                                                                                    {
                                                                                        unit_test::test_case_$expression(
                                                                                            $state_157, 
                                                                                            $lambda ($state_209, $continuation_210)
                                                                                                {
                                                                                                    $symbol a;
                                                                                                    a = 0;
                                                                                                    $symbol $state_211;
                                                                                                    $state_211 = $state_209;
                                                                                                    $symbol b;
                                                                                                    b = 0;
                                                                                                    $symbol $state_213;
                                                                                                    $state_213 = $state_211;
                                                                                                    $symbol c;
                                                                                                    c = 0;
                                                                                                    $symbol $state_215;
                                                                                                    $state_215 = $state_213;
                                                                                                    standard_library::try(
                                                                                                        $state_215, 
                                                                                                        $lambda ($state_219, $continuation_220)
                                                                                                            {
                                                                                                                a = 1;
                                                                                                                $continuation_220(
                                                                                                                    $state_219, 
                                                                                                                    $null
                                                                                                                    );
                                                                                                            }, 
                                                                                                        $lambda ($state_217, $result_218)
                                                                                                            {
                                                                                                                standard_library::else_try(
                                                                                                                    $state_217, 
                                                                                                                    $result_218, 
                                                                                                                    $lambda ($state_223, $continuation_224)
                                                                                                                        {
                                                                                                                            a = 2;
                                                                                                                            $continuation_224(
                                                                                                                                $state_223, 
                                                                                                                                $null
                                                                                                                                );
                                                                                                                        }, 
                                                                                                                    $lambda ($state_221, $result_222)
                                                                                                                        {
                                                                                                                            standard_library::catch_$argument(
                                                                                                                                $state_221, 
                                                                                                                                $result_222, 
                                                                                                                                $lambda ($state_227, exception, $continuation_228)
                                                                                                                                    {
                                                                                                                                        a = 3;
                                                                                                                                        $continuation_228(
                                                                                                                                            $state_227, 
                                                                                                                                            $null
                                                                                                                                            );
                                                                                                                                    }, 
                                                                                                                                $lambda ($state_225, $result_226)
                                                                                                                                    {
                                                                                                                                        standard_library::try(
                                                                                                                                            $state_225, 
                                                                                                                                            $lambda ($state_231, $continuation_232)
                                                                                                                                                {
                                                                                                                                                    b = 1;
                                                                                                                                                    standard_library::raise_$expression(
                                                                                                                                                        $state_231, 
                                                                                                                                                        "exception", 
                                                                                                                                                        $continuation_232
                                                                                                                                                        );
                                                                                                                                                }, 
                                                                                                                                            $lambda ($state_229, $result_230)
                                                                                                                                                {
                                                                                                                                                    standard_library::else_try(
                                                                                                                                                        $state_229, 
                                                                                                                                                        $result_230, 
                                                                                                                                                        $lambda ($state_237, $continuation_238)
                                                                                                                                                            {
                                                                                                                                                                b = 2;
                                                                                                                                                                $continuation_238(
                                                                                                                                                                    $state_237, 
                                                                                                                                                                    $null
                                                                                                                                                                    );
                                                                                                                                                            }, 
                                                                                                                                                        $lambda ($state_235, $result_236)
                                                                                                                                                            {
                                                                                                                                                                standard_library::catch_$argument(
                                                                                                                                                                    $state_235, 
                                                                                                                                                                    $result_236, 
                                                                                                                                                                    $lambda ($state_241, exception, $continuation_242)
                                                                                                                                                                        {
                                                                                                                                                                            b = 3;
                                                                                                                                                                            $continuation_242(
                                                                                                                                                                                $state_241, 
                                                                                                                                                                                $null
                                                                                                                                                                                );
                                                                                                                                                                        }, 
                                                                                                                                                                    $lambda ($state_239, $result_240)
                                                                                                                                                                        {
                                                                                                                                                                            standard_library::try(
                                                                                                                                                                                $state_239, 
                                                                                                                                                                                $lambda ($state_245, $continuation_246)
                                                                                                                                                                                    {
                                                                                                                                                                                        c = 1;
                                                                                                                                                                                        standard_library::raise_$expression(
                                                                                                                                                                                            $state_245, 
                                                                                                                                                                                            "exception", 
                                                                                                                                                                                            $continuation_246
                                                                                                                                                                                            );
                                                                                                                                                                                    }, 
                                                                                                                                                                                $lambda ($state_243, $result_244)
                                                                                                                                                                                    {
                                                                                                                                                                                        standard_library::else_try(
                                                                                                                                                                                            $state_243, 
                                                                                                                                                                                            $result_244, 
                                                                                                                                                                                            $lambda ($state_251, $continuation_252)
                                                                                                                                                                                                {
                                                                                                                                                                                                    c = 2;
                                                                                                                                                                                                    standard_library::raise_$expression(
                                                                                                                                                                                                        $state_251, 
                                                                                                                                                                                                        "exception", 
                                                                                                                                                                                                        $continuation_252
                                                                                                                                                                                                        );
                                                                                                                                                                                                }, 
                                                                                                                                                                                            $lambda ($state_249, $result_250)
                                                                                                                                                                                                {
                                                                                                                                                                                                    standard_library::catch_$argument(
                                                                                                                                                                                                        $state_249, 
                                                                                                                                                                                                        $result_250, 
                                                                                                                                                                                                        $lambda ($state_257, exception, $continuation_258)
                                                                                                                                                                                                            {
                                                                                                                                                                                                                c = 3;
                                                                                                                                                                                                                $continuation_258(
                                                                                                                                                                                                                    $state_257, 
                                                                                                                                                                                                                    $null
                                                                                                                                                                                                                    );
                                                                                                                                                                                                            }, 
                                                                                                                                                                                                        $lambda ($state_255, $result_256)
                                                                                                                                                                                                            {
                                                                                                                                                                                                                unit_test::assert_$expression_should_be_$expression(
                                                                                                                                                                                                                    $state_255, 
                                                                                                                                                                                                                    a, 
                                                                                                                                                                                                                    1, 
                                                                                                                                                                                                                    $lambda ($state_259, $result_260)
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            unit_test::assert_$expression_should_be_$expression(
                                                                                                                                                                                                                                $state_259, 
                                                                                                                                                                                                                                b, 
                                                                                                                                                                                                                                2, 
                                                                                                                                                                                                                                $lambda ($state_261, $result_262)
                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                        unit_test::assert_$expression_should_be_$expression(
                                                                                                                                                                                                                                            $state_261, 
                                                                                                                                                                                                                                            c, 
                                                                                                                                                                                                                                            3, 
                                                                                                                                                                                                                                            $continuation_210
                                                                                                                                                                                                                                            );
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                );
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                    );
                                                                                                                                                                                                            }
                                                                                                                                                                                                        );
                                                                                                                                                                                                }
                                                                                                                                                                                            );
                                                                                                                                                                                    }
                                                                                                                                                                                );
                                                                                                                                                                        }
                                                                                                                                                                    );
                                                                                                                                                            }
                                                                                                                                                        );
                                                                                                                                                }
                                                                                                                                            );
                                                                                                                                    }
                                                                                                                                );
                                                                                                                        }
                                                                                                                    );
                                                                                                            }
                                                                                                        );
                                                                                                }, 
                                                                                            "Only one branch of the try-else statement will be executed", 
                                                                                            $lambda ($state_207, $result_208)
                                                                                                {
                                                                                                    unit_test::test_case_$expression(
                                                                                                        $state_207, 
                                                                                                        $lambda ($state_267, $continuation_268)
                                                                                                            {
                                                                                                                $symbol e;
                                                                                                                e = 0;
                                                                                                                $symbol $state_269;
                                                                                                                $state_269 = $state_267;
                                                                                                                standard_library::named_block_$argument(
                                                                                                                    $state_269, 
                                                                                                                    $lambda ($state_273, one, $continuation_274)
                                                                                                                        standard_library::add_$expression_to_assignable(
                                                                                                                            $state_273, 
                                                                                                                            1, 
                                                                                                                            $lambda ($state_275, $continuation_276)
                                                                                                                                $continuation_276(
                                                                                                                                    $state_275, 
                                                                                                                                    e
                                                                                                                                    );, 
                                                                                                                            $lambda ($state_277, $input_278, $continuation_279)
                                                                                                                                {
                                                                                                                                    e = $input_278;
                                                                                                                                    $continuation_279(
                                                                                                                                        $state_277, 
                                                                                                                                        $null
                                                                                                                                        );
                                                                                                                                }, 
                                                                                                                            $lambda ($state_280, $result_281)
                                                                                                                                {
                                                                                                                                    standard_library::named_block_$argument(
                                                                                                                                        $state_280, 
                                                                                                                                        $lambda ($state_284, two, $continuation_285)
                                                                                                                                            standard_library::add_$expression_to_assignable(
                                                                                                                                                $state_284, 
                                                                                                                                                2, 
                                                                                                                                                $lambda ($state_286, $continuation_287)
                                                                                                                                                    $continuation_287(
                                                                                                                                                        $state_286, 
                                                                                                                                                        e
                                                                                                                                                        );, 
                                                                                                                                                $lambda ($state_288, $input_289, $continuation_290)
                                                                                                                                                    {
                                                                                                                                                        e = $input_289;
                                                                                                                                                        $continuation_290(
                                                                                                                                                            $state_288, 
                                                                                                                                                            $null
                                                                                                                                                            );
                                                                                                                                                    }, 
                                                                                                                                                $lambda ($state_291, $result_292)
                                                                                                                                                    {
                                                                                                                                                        standard_library::named_block_$argument(
                                                                                                                                                            $state_291, 
                                                                                                                                                            $lambda ($state_295, three, $continuation_296)
                                                                                                                                                                standard_library::add_$expression_to_assignable(
                                                                                                                                                                    $state_295, 
                                                                                                                                                                    4, 
                                                                                                                                                                    $lambda ($state_297, $continuation_298)
                                                                                                                                                                        $continuation_298(
                                                                                                                                                                            $state_297, 
                                                                                                                                                                            e
                                                                                                                                                                            );, 
                                                                                                                                                                    $lambda ($state_299, $input_300, $continuation_301)
                                                                                                                                                                        {
                                                                                                                                                                            e = $input_300;
                                                                                                                                                                            $continuation_301(
                                                                                                                                                                                $state_299, 
                                                                                                                                                                                $null
                                                                                                                                                                                );
                                                                                                                                                                        }, 
                                                                                                                                                                    $lambda ($state_302, $result_303)
                                                                                                                                                                        {
                                                                                                                                                                            standard_library::exit_block_$expression(
                                                                                                                                                                                $state_302, 
                                                                                                                                                                                two, 
                                                                                                                                                                                $lambda ($state_304, $result_305)
                                                                                                                                                                                    {
                                                                                                                                                                                        standard_library::add_$expression_to_assignable(
                                                                                                                                                                                            $state_304, 
                                                                                                                                                                                            8, 
                                                                                                                                                                                            $lambda ($state_306, $continuation_307)
                                                                                                                                                                                                $continuation_307(
                                                                                                                                                                                                    $state_306, 
                                                                                                                                                                                                    e
                                                                                                                                                                                                    );, 
                                                                                                                                                                                            $lambda ($state_308, $input_309, $continuation_310)
                                                                                                                                                                                                {
                                                                                                                                                                                                    e = $input_309;
                                                                                                                                                                                                    $continuation_310(
                                                                                                                                                                                                        $state_308, 
                                                                                                                                                                                                        $null
                                                                                                                                                                                                        );
                                                                                                                                                                                                }, 
                                                                                                                                                                                            $continuation_296
                                                                                                                                                                                            );
                                                                                                                                                                                    }
                                                                                                                                                                                );
                                                                                                                                                                        }
                                                                                                                                                                    );, 
                                                                                                                                                            $lambda ($state_293, $result_294)
                                                                                                                                                                {
                                                                                                                                                                    standard_library::add_$expression_to_assignable(
                                                                                                                                                                        $state_293, 
                                                                                                                                                                        16, 
                                                                                                                                                                        $lambda ($state_313, $continuation_314)
                                                                                                                                                                            $continuation_314(
                                                                                                                                                                                $state_313, 
                                                                                                                                                                                e
                                                                                                                                                                                );, 
                                                                                                                                                                        $lambda ($state_315, $input_316, $continuation_317)
                                                                                                                                                                            {
                                                                                                                                                                                e = $input_316;
                                                                                                                                                                                $continuation_317(
                                                                                                                                                                                    $state_315, 
                                                                                                                                                                                    $null
                                                                                                                                                                                    );
                                                                                                                                                                            }, 
                                                                                                                                                                        $continuation_285
                                                                                                                                                                        );
                                                                                                                                                                }
                                                                                                                                                            );
                                                                                                                                                    }
                                                                                                                                                );, 
                                                                                                                                        $lambda ($state_282, $result_283)
                                                                                                                                            {
                                                                                                                                                standard_library::add_$expression_to_assignable(
                                                                                                                                                    $state_282, 
                                                                                                                                                    32, 
                                                                                                                                                    $lambda ($state_320, $continuation_321)
                                                                                                                                                        $continuation_321(
                                                                                                                                                            $state_320, 
                                                                                                                                                            e
                                                                                                                                                            );, 
                                                                                                                                                    $lambda ($state_322, $input_323, $continuation_324)
                                                                                                                                                        {
                                                                                                                                                            e = $input_323;
                                                                                                                                                            $continuation_324(
                                                                                                                                                                $state_322, 
                                                                                                                                                                $null
                                                                                                                                                                );
                                                                                                                                                        }, 
                                                                                                                                                    $continuation_274
                                                                                                                                                    );
                                                                                                                                            }
                                                                                                                                        );
                                                                                                                                }
                                                                                                                            );, 
                                                                                                                    $lambda ($state_271, $result_272)
                                                                                                                        {
                                                                                                                            standard_library::add_$expression_to_assignable(
                                                                                                                                $state_271, 
                                                                                                                                64, 
                                                                                                                                $lambda ($state_327, $continuation_328)
                                                                                                                                    $continuation_328(
                                                                                                                                        $state_327, 
                                                                                                                                        e
                                                                                                                                        );, 
                                                                                                                                $lambda ($state_329, $input_330, $continuation_331)
                                                                                                                                    {
                                                                                                                                        e = $input_330;
                                                                                                                                        $continuation_331(
                                                                                                                                            $state_329, 
                                                                                                                                            $null
                                                                                                                                            );
                                                                                                                                    }, 
                                                                                                                                $lambda ($state_332, $result_333)
                                                                                                                                    {
                                                                                                                                        unit_test::assert_$expression_should_be_$expression(
                                                                                                                                            $state_332, 
                                                                                                                                            e, 
                                                                                                                                            103, 
                                                                                                                                            $continuation_268
                                                                                                                                            );
                                                                                                                                    }
                                                                                                                                );
                                                                                                                        }
                                                                                                                    );
                                                                                                            }, 
                                                                                                        "Exit block should jump out of the correct box", 
                                                                                                        $lambda ($state_265, $result_266)
                                                                                                            {
                                                                                                                $continuation(
                                                                                                                    $state, 
                                                                                                                    $the_result
                                                                                                                    );
                                                                                                            }
                                                                                                        );
                                                                                                }
                                                                                            );
                                                                                    }
                                                                                );
                                                                        }
                                                                    );
                                                            }
                                                        );
                                                }
                                            );
                                    }
                                );
                        }
                    );
            }
        );
}

$procedure $dispatch_fail<>standard_library::repeat_with_$argument_in_$expression($state, deal_with_$expression, items, $continuation)
{
    $symbol $the_result;
    standard_library::raise_$expression(
        $state, 
        "Only enumerable object (like containers) can be iterated using the repeat-with-in statement.", 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure ($Array).$dispatch<>standard_library::repeat_with_$argument_in_$expression($state, deal_with_$expression, items, $continuation)
{
    standard_library::repeat_with_$argument_in_$expression<array>(
        $state, 
        deal_with_$expression, 
        items, 
        $continuation
        );
}

$procedure ($Object).$dispatch<>standard_library::repeat_with_$argument_in_$expression($state, deal_with_$expression, items, $continuation)
{
    $dispatch_fail<>standard_library::repeat_with_$argument_in_$expression(
        $state, 
        deal_with_$expression, 
        items, 
        $continuation
        );
}

$procedure $dispatch_fail<>standard_library::number_of_$primitive($state, value, $continuation)
{
    $symbol $the_result;
    standard_library::raise_$expression(
        $state, 
        (("number of " & value) & " is illegal."), 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure ($Integer).$dispatch<>standard_library::number_of_$primitive($state, value, $continuation)
{
    standard_library::number_of_$primitive<integer>(
        $state, 
        value, 
        $continuation
        );
}

$procedure ($Float).$dispatch<>standard_library::number_of_$primitive($state, value, $continuation)
{
    standard_library::number_of_$primitive<float>(
        $state, 
        value, 
        $continuation
        );
}

$procedure ($Function).$dispatch<>standard_library::number_of_$primitive($state, value, $continuation)
{
    standard_library::number_of_$primitive<string>(
        $state, 
        value, 
        $continuation
        );
}

$procedure ($Object).$dispatch<>standard_library::number_of_$primitive($state, value, $continuation)
{
    $dispatch_fail<>standard_library::number_of_$primitive(
        $state, 
        value, 
        $continuation
        );
}

$procedure $dispatch_fail<>standard_library::integer_of_$primitive($state, value, $continuation)
{
    $symbol $the_result;
    standard_library::raise_$expression(
        $state, 
        (("integer of " & value) & " is illegal."), 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure ($Integer).$dispatch<>standard_library::integer_of_$primitive($state, value, $continuation)
{
    standard_library::integer_of_$primitive<integer>(
        $state, 
        value, 
        $continuation
        );
}

$procedure ($Float).$dispatch<>standard_library::integer_of_$primitive($state, value, $continuation)
{
    standard_library::integer_of_$primitive<float>(
        $state, 
        value, 
        $continuation
        );
}

$procedure ($Function).$dispatch<>standard_library::integer_of_$primitive($state, value, $continuation)
{
    standard_library::integer_of_$primitive<string>(
        $state, 
        value, 
        $continuation
        );
}

$procedure ($Object).$dispatch<>standard_library::integer_of_$primitive($state, value, $continuation)
{
    $dispatch_fail<>standard_library::integer_of_$primitive(
        $state, 
        value, 
        $continuation
        );
}

$procedure $dispatch_fail<>standard_library::float_of_$primitive($state, value, $continuation)
{
    $symbol $the_result;
    standard_library::raise_$expression(
        $state, 
        (("float of " & value) & " is illegal."), 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure ($Integer).$dispatch<>standard_library::float_of_$primitive($state, value, $continuation)
{
    standard_library::float_of_$primitive<integer>(
        $state, 
        value, 
        $continuation
        );
}

$procedure ($Float).$dispatch<>standard_library::float_of_$primitive($state, value, $continuation)
{
    standard_library::float_of_$primitive<float>(
        $state, 
        value, 
        $continuation
        );
}

$procedure ($Function).$dispatch<>standard_library::float_of_$primitive($state, value, $continuation)
{
    standard_library::float_of_$primitive<string>(
        $state, 
        value, 
        $continuation
        );
}

$procedure ($Object).$dispatch<>standard_library::float_of_$primitive($state, value, $continuation)
{
    $dispatch_fail<>standard_library::float_of_$primitive(
        $state, 
        value, 
        $continuation
        );
}

$procedure $dispatch_fail<>standard_library::operator_POS_$primitive($state, value, $continuation)
{
    $symbol $the_result;
    standard_library::number_of_$primitive(
        $state, 
        value, 
        $lambda ($state_0, $result_1)
            {
                $the_result = +$result_1;
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure ($Float).$dispatch<>standard_library::operator_POS_$primitive($state, value, $continuation)
{
    standard_library::operator_POS_$primitive<float>(
        $state, 
        value, 
        $continuation
        );
}

$procedure ($Integer).$dispatch<>standard_library::operator_POS_$primitive($state, value, $continuation)
{
    standard_library::operator_POS_$primitive<integer>(
        $state, 
        value, 
        $continuation
        );
}

$procedure ($Object).$dispatch<>standard_library::operator_POS_$primitive($state, value, $continuation)
{
    $dispatch_fail<>standard_library::operator_POS_$primitive(
        $state, 
        value, 
        $continuation
        );
}

$procedure $dispatch_fail<>standard_library::operator_NEG_$primitive($state, value, $continuation)
{
    $symbol $the_result;
    standard_library::number_of_$primitive(
        $state, 
        value, 
        $lambda ($state_0, $result_1)
            {
                $the_result = -$result_1;
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure ($Integer).$dispatch<>standard_library::operator_NEG_$primitive($state, value, $continuation)
{
    standard_library::operator_NEG_$primitive<integer>(
        $state, 
        value, 
        $continuation
        );
}

$procedure ($Float).$dispatch<>standard_library::operator_NEG_$primitive($state, value, $continuation)
{
    standard_library::operator_NEG_$primitive<float>(
        $state, 
        value, 
        $continuation
        );
}

$procedure ($Object).$dispatch<>standard_library::operator_NEG_$primitive($state, value, $continuation)
{
    $dispatch_fail<>standard_library::operator_NEG_$primitive(
        $state, 
        value, 
        $continuation
        );
}

$procedure $dispatch_fail<>standard_library::operator_NOT_$primitive($state, value, $continuation)
{
    $symbol $the_result;
    standard_library::raise_$expression(
        $state, 
        (("not " & value) & " is illegal."), 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure ($Boolean).$dispatch<>standard_library::operator_NOT_$primitive($state, value, $continuation)
{
    standard_library::operator_NOT_$primitive<boolean>(
        $state, 
        value, 
        $continuation
        );
}

$procedure ($Object).$dispatch<>standard_library::operator_NOT_$primitive($state, value, $continuation)
{
    $dispatch_fail<>standard_library::operator_NOT_$primitive(
        $state, 
        value, 
        $continuation
        );
}

$procedure $dispatch_fail<>standard_library::operator_$expression_CONCAT_$primitive($state, a, b, $continuation)
{
    $symbol $the_result;
    standard_library::string_of_$primitive(
        $state, 
        a, 
        $lambda ($state_0, $result_1)
            {
                $symbol $var_4;
                $var_4 = $result_1;
                standard_library::string_of_$primitive(
                    $state_0, 
                    b, 
                    $lambda ($state_2, $result_3)
                        {
                            $the_result = ($var_4 & $result_3);
                            $continuation(
                                $state, 
                                $the_result
                                );
                        }
                    );
            }
        );
}

$procedure ($Function).$dispatch<>standard_library::operator_$expression_CONCAT_$primitive($state, a, b, $continuation)
{
    b.$dispatch<$Function>standard_library::operator_$expression_CONCAT_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Function).$dispatch<$Function>standard_library::operator_$expression_CONCAT_$primitive($state, a, b, $continuation)
{
    standard_library::operator_$expression<string>_CONCAT_$primitive<string>(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Object).$dispatch<$Function>standard_library::operator_$expression_CONCAT_$primitive($state, a, b, $continuation)
{
    $dispatch_fail<>standard_library::operator_$expression_CONCAT_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Object).$dispatch<>standard_library::operator_$expression_CONCAT_$primitive($state, a, b, $continuation)
{
    $dispatch_fail<>standard_library::operator_$expression_CONCAT_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure $dispatch_fail<>standard_library::operator_$expression_ADD_$primitive($state, a, b, $continuation)
{
    $symbol $the_result;
    standard_library::number_of_$primitive(
        $state, 
        a, 
        $lambda ($state_0, $result_1)
            {
                $symbol $var_4;
                $var_4 = $result_1;
                standard_library::number_of_$primitive(
                    $state_0, 
                    b, 
                    $lambda ($state_2, $result_3)
                        {
                            $the_result = ($var_4 + $result_3);
                            $continuation(
                                $state, 
                                $the_result
                                );
                        }
                    );
            }
        );
}

$procedure ($Integer).$dispatch<>standard_library::operator_$expression_ADD_$primitive($state, a, b, $continuation)
{
    b.$dispatch<$Integer>standard_library::operator_$expression_ADD_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Integer).$dispatch<$Integer>standard_library::operator_$expression_ADD_$primitive($state, a, b, $continuation)
{
    standard_library::operator_$expression<integer>_ADD_$primitive<integer>(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Float).$dispatch<>standard_library::operator_$expression_ADD_$primitive($state, a, b, $continuation)
{
    b.$dispatch<$Float>standard_library::operator_$expression_ADD_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Float).$dispatch<$Float>standard_library::operator_$expression_ADD_$primitive($state, a, b, $continuation)
{
    standard_library::operator_$expression<float>_ADD_$primitive<float>(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Float).$dispatch<$Integer>standard_library::operator_$expression_ADD_$primitive($state, a, b, $continuation)
{
    standard_library::operator_$expression<integer>_ADD_$primitive<float>(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Integer).$dispatch<$Float>standard_library::operator_$expression_ADD_$primitive($state, a, b, $continuation)
{
    standard_library::operator_$expression<float>_ADD_$primitive<integer>(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Object).$dispatch<$Float>standard_library::operator_$expression_ADD_$primitive($state, a, b, $continuation)
{
    $dispatch_fail<>standard_library::operator_$expression_ADD_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Object).$dispatch<$Integer>standard_library::operator_$expression_ADD_$primitive($state, a, b, $continuation)
{
    $dispatch_fail<>standard_library::operator_$expression_ADD_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Object).$dispatch<>standard_library::operator_$expression_ADD_$primitive($state, a, b, $continuation)
{
    $dispatch_fail<>standard_library::operator_$expression_ADD_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure $dispatch_fail<>standard_library::operator_$expression_SUB_$primitive($state, a, b, $continuation)
{
    $symbol $the_result;
    standard_library::number_of_$primitive(
        $state, 
        a, 
        $lambda ($state_0, $result_1)
            {
                $symbol $var_4;
                $var_4 = $result_1;
                standard_library::number_of_$primitive(
                    $state_0, 
                    b, 
                    $lambda ($state_2, $result_3)
                        {
                            $the_result = ($var_4 - $result_3);
                            $continuation(
                                $state, 
                                $the_result
                                );
                        }
                    );
            }
        );
}

$procedure ($Integer).$dispatch<>standard_library::operator_$expression_SUB_$primitive($state, a, b, $continuation)
{
    b.$dispatch<$Integer>standard_library::operator_$expression_SUB_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Integer).$dispatch<$Integer>standard_library::operator_$expression_SUB_$primitive($state, a, b, $continuation)
{
    standard_library::operator_$expression<integer>_SUB_$primitive<integer>(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Float).$dispatch<>standard_library::operator_$expression_SUB_$primitive($state, a, b, $continuation)
{
    b.$dispatch<$Float>standard_library::operator_$expression_SUB_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Float).$dispatch<$Float>standard_library::operator_$expression_SUB_$primitive($state, a, b, $continuation)
{
    standard_library::operator_$expression<float>_SUB_$primitive<float>(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Float).$dispatch<$Integer>standard_library::operator_$expression_SUB_$primitive($state, a, b, $continuation)
{
    standard_library::operator_$expression<integer>_SUB_$primitive<float>(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Integer).$dispatch<$Float>standard_library::operator_$expression_SUB_$primitive($state, a, b, $continuation)
{
    standard_library::operator_$expression<float>_SUB_$primitive<integer>(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Object).$dispatch<$Float>standard_library::operator_$expression_SUB_$primitive($state, a, b, $continuation)
{
    $dispatch_fail<>standard_library::operator_$expression_SUB_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Object).$dispatch<$Integer>standard_library::operator_$expression_SUB_$primitive($state, a, b, $continuation)
{
    $dispatch_fail<>standard_library::operator_$expression_SUB_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Object).$dispatch<>standard_library::operator_$expression_SUB_$primitive($state, a, b, $continuation)
{
    $dispatch_fail<>standard_library::operator_$expression_SUB_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure $dispatch_fail<>standard_library::operator_$expression_MUL_$primitive($state, a, b, $continuation)
{
    $symbol $the_result;
    standard_library::number_of_$primitive(
        $state, 
        a, 
        $lambda ($state_0, $result_1)
            {
                $symbol $var_4;
                $var_4 = $result_1;
                standard_library::number_of_$primitive(
                    $state_0, 
                    b, 
                    $lambda ($state_2, $result_3)
                        {
                            $the_result = ($var_4 * $result_3);
                            $continuation(
                                $state, 
                                $the_result
                                );
                        }
                    );
            }
        );
}

$procedure ($Integer).$dispatch<>standard_library::operator_$expression_MUL_$primitive($state, a, b, $continuation)
{
    b.$dispatch<$Integer>standard_library::operator_$expression_MUL_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Float).$dispatch<$Integer>standard_library::operator_$expression_MUL_$primitive($state, a, b, $continuation)
{
    standard_library::operator_$expression<integer>_MUL_$primitive<float>(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Float).$dispatch<>standard_library::operator_$expression_MUL_$primitive($state, a, b, $continuation)
{
    b.$dispatch<$Float>standard_library::operator_$expression_MUL_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Integer).$dispatch<$Float>standard_library::operator_$expression_MUL_$primitive($state, a, b, $continuation)
{
    standard_library::operator_$expression<float>_MUL_$primitive<integer>(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Integer).$dispatch<$Integer>standard_library::operator_$expression_MUL_$primitive($state, a, b, $continuation)
{
    standard_library::operator_$expression<integer>_MUL_$primitive<integer>(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Float).$dispatch<$Float>standard_library::operator_$expression_MUL_$primitive($state, a, b, $continuation)
{
    standard_library::operator_$expression<float>_MUL_$primitive<float>(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Object).$dispatch<$Float>standard_library::operator_$expression_MUL_$primitive($state, a, b, $continuation)
{
    $dispatch_fail<>standard_library::operator_$expression_MUL_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Object).$dispatch<$Integer>standard_library::operator_$expression_MUL_$primitive($state, a, b, $continuation)
{
    $dispatch_fail<>standard_library::operator_$expression_MUL_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Object).$dispatch<>standard_library::operator_$expression_MUL_$primitive($state, a, b, $continuation)
{
    $dispatch_fail<>standard_library::operator_$expression_MUL_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure $dispatch_fail<>standard_library::operator_$expression_DIV_$primitive($state, a, b, $continuation)
{
    $symbol $the_result;
    standard_library::number_of_$primitive(
        $state, 
        a, 
        $lambda ($state_0, $result_1)
            {
                $symbol $var_4;
                $var_4 = $result_1;
                standard_library::number_of_$primitive(
                    $state_0, 
                    b, 
                    $lambda ($state_2, $result_3)
                        {
                            $the_result = ($var_4 / $result_3);
                            $continuation(
                                $state, 
                                $the_result
                                );
                        }
                    );
            }
        );
}

$procedure ($Integer).$dispatch<>standard_library::operator_$expression_DIV_$primitive($state, a, b, $continuation)
{
    b.$dispatch<$Integer>standard_library::operator_$expression_DIV_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Integer).$dispatch<$Integer>standard_library::operator_$expression_DIV_$primitive($state, a, b, $continuation)
{
    standard_library::operator_$expression<integer>_DIV_$primitive<integer>(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Float).$dispatch<>standard_library::operator_$expression_DIV_$primitive($state, a, b, $continuation)
{
    b.$dispatch<$Float>standard_library::operator_$expression_DIV_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Float).$dispatch<$Float>standard_library::operator_$expression_DIV_$primitive($state, a, b, $continuation)
{
    standard_library::operator_$expression<float>_DIV_$primitive<float>(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Float).$dispatch<$Integer>standard_library::operator_$expression_DIV_$primitive($state, a, b, $continuation)
{
    standard_library::operator_$expression<integer>_DIV_$primitive<float>(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Integer).$dispatch<$Float>standard_library::operator_$expression_DIV_$primitive($state, a, b, $continuation)
{
    standard_library::operator_$expression<float>_DIV_$primitive<integer>(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Object).$dispatch<$Float>standard_library::operator_$expression_DIV_$primitive($state, a, b, $continuation)
{
    $dispatch_fail<>standard_library::operator_$expression_DIV_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Object).$dispatch<$Integer>standard_library::operator_$expression_DIV_$primitive($state, a, b, $continuation)
{
    $dispatch_fail<>standard_library::operator_$expression_DIV_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Object).$dispatch<>standard_library::operator_$expression_DIV_$primitive($state, a, b, $continuation)
{
    $dispatch_fail<>standard_library::operator_$expression_DIV_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure $dispatch_fail<>standard_library::operator_$expression_INTDIV_$primitive($state, a, b, $continuation)
{
    $symbol $the_result;
    standard_library::number_of_$primitive(
        $state, 
        a, 
        $lambda ($state_0, $result_1)
            {
                $symbol $var_4;
                $var_4 = $result_1;
                standard_library::number_of_$primitive(
                    $state_0, 
                    b, 
                    $lambda ($state_2, $result_3)
                        {
                            $the_result = ($var_4 \ $result_3);
                            $continuation(
                                $state, 
                                $the_result
                                );
                        }
                    );
            }
        );
}

$procedure ($Integer).$dispatch<>standard_library::operator_$expression_INTDIV_$primitive($state, a, b, $continuation)
{
    b.$dispatch<$Integer>standard_library::operator_$expression_INTDIV_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Integer).$dispatch<$Integer>standard_library::operator_$expression_INTDIV_$primitive($state, a, b, $continuation)
{
    standard_library::operator_$expression<integer>_INTDIV_$primitive<integer>(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Float).$dispatch<>standard_library::operator_$expression_INTDIV_$primitive($state, a, b, $continuation)
{
    b.$dispatch<$Float>standard_library::operator_$expression_INTDIV_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Float).$dispatch<$Float>standard_library::operator_$expression_INTDIV_$primitive($state, a, b, $continuation)
{
    standard_library::operator_$expression<float>_INTDIV_$primitive<float>(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Integer).$dispatch<$Float>standard_library::operator_$expression_INTDIV_$primitive($state, a, b, $continuation)
{
    standard_library::operator_$expression<float>_INTDIV_$primitive<integer>(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Float).$dispatch<$Integer>standard_library::operator_$expression_INTDIV_$primitive($state, a, b, $continuation)
{
    standard_library::operator_$expression<integer>_INTDIV_$primitive<float>(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Object).$dispatch<$Float>standard_library::operator_$expression_INTDIV_$primitive($state, a, b, $continuation)
{
    $dispatch_fail<>standard_library::operator_$expression_INTDIV_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Object).$dispatch<$Integer>standard_library::operator_$expression_INTDIV_$primitive($state, a, b, $continuation)
{
    $dispatch_fail<>standard_library::operator_$expression_INTDIV_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Object).$dispatch<>standard_library::operator_$expression_INTDIV_$primitive($state, a, b, $continuation)
{
    $dispatch_fail<>standard_library::operator_$expression_INTDIV_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure $dispatch_fail<>standard_library::operator_$expression_MOD_$primitive($state, a, b, $continuation)
{
    $symbol $the_result;
    standard_library::number_of_$primitive(
        $state, 
        a, 
        $lambda ($state_0, $result_1)
            {
                $symbol $var_4;
                $var_4 = $result_1;
                standard_library::number_of_$primitive(
                    $state_0, 
                    b, 
                    $lambda ($state_2, $result_3)
                        {
                            $the_result = ($var_4 % $result_3);
                            $continuation(
                                $state, 
                                $the_result
                                );
                        }
                    );
            }
        );
}

$procedure ($Integer).$dispatch<>standard_library::operator_$expression_MOD_$primitive($state, a, b, $continuation)
{
    b.$dispatch<$Integer>standard_library::operator_$expression_MOD_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Integer).$dispatch<$Integer>standard_library::operator_$expression_MOD_$primitive($state, a, b, $continuation)
{
    standard_library::operator_$expression<integer>_MOD_$primitive<integer>(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Float).$dispatch<>standard_library::operator_$expression_MOD_$primitive($state, a, b, $continuation)
{
    b.$dispatch<$Float>standard_library::operator_$expression_MOD_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Float).$dispatch<$Float>standard_library::operator_$expression_MOD_$primitive($state, a, b, $continuation)
{
    standard_library::operator_$expression<float>_MOD_$primitive<float>(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Float).$dispatch<$Integer>standard_library::operator_$expression_MOD_$primitive($state, a, b, $continuation)
{
    standard_library::operator_$expression<integer>_MOD_$primitive<float>(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Integer).$dispatch<$Float>standard_library::operator_$expression_MOD_$primitive($state, a, b, $continuation)
{
    standard_library::operator_$expression<float>_MOD_$primitive<integer>(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Object).$dispatch<$Float>standard_library::operator_$expression_MOD_$primitive($state, a, b, $continuation)
{
    $dispatch_fail<>standard_library::operator_$expression_MOD_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Object).$dispatch<$Integer>standard_library::operator_$expression_MOD_$primitive($state, a, b, $continuation)
{
    $dispatch_fail<>standard_library::operator_$expression_MOD_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Object).$dispatch<>standard_library::operator_$expression_MOD_$primitive($state, a, b, $continuation)
{
    $dispatch_fail<>standard_library::operator_$expression_MOD_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure $dispatch_fail<>standard_library::operator_$expression_EQUAL_$primitive($state, a, b, $continuation)
{
    $symbol $the_result;
    $external ("o_e_o")(
        $state, 
        a, 
        b, 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure ($Integer).$dispatch<>standard_library::operator_$expression_EQUAL_$primitive($state, a, b, $continuation)
{
    b.$dispatch<$Integer>standard_library::operator_$expression_EQUAL_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Integer).$dispatch<$Integer>standard_library::operator_$expression_EQUAL_$primitive($state, a, b, $continuation)
{
    standard_library::operator_$expression<integer>_EQUAL_$primitive<integer>(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Float).$dispatch<>standard_library::operator_$expression_EQUAL_$primitive($state, a, b, $continuation)
{
    b.$dispatch<$Float>standard_library::operator_$expression_EQUAL_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Float).$dispatch<$Float>standard_library::operator_$expression_EQUAL_$primitive($state, a, b, $continuation)
{
    standard_library::operator_$expression<float>_EQUAL_$primitive<float>(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Function).$dispatch<>standard_library::operator_$expression_EQUAL_$primitive($state, a, b, $continuation)
{
    b.$dispatch<$Function>standard_library::operator_$expression_EQUAL_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Function).$dispatch<$Function>standard_library::operator_$expression_EQUAL_$primitive($state, a, b, $continuation)
{
    standard_library::operator_$expression<string>_EQUAL_$primitive<string>(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Boolean).$dispatch<>standard_library::operator_$expression_EQUAL_$primitive($state, a, b, $continuation)
{
    b.$dispatch<$Boolean>standard_library::operator_$expression_EQUAL_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Boolean).$dispatch<$Boolean>standard_library::operator_$expression_EQUAL_$primitive($state, a, b, $continuation)
{
    standard_library::operator_$expression<boolean>_EQUAL_$primitive<boolean>(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Float).$dispatch<$Integer>standard_library::operator_$expression_EQUAL_$primitive($state, a, b, $continuation)
{
    standard_library::operator_$expression<integer>_EQUAL_$primitive<float>(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Integer).$dispatch<$Float>standard_library::operator_$expression_EQUAL_$primitive($state, a, b, $continuation)
{
    standard_library::operator_$expression<float>_EQUAL_$primitive<integer>(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Object).$dispatch<$Function>standard_library::operator_$expression_EQUAL_$primitive($state, a, b, $continuation)
{
    standard_library::operator_$expression<string>_EQUAL_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Object).$dispatch<>standard_library::operator_$expression_EQUAL_$primitive($state, a, b, $continuation)
{
    b.$dispatch<$Object>standard_library::operator_$expression_EQUAL_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Function).$dispatch<$Object>standard_library::operator_$expression_EQUAL_$primitive($state, a, b, $continuation)
{
    standard_library::operator_$expression_EQUAL_$primitive<string>(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Object).$dispatch<$Boolean>standard_library::operator_$expression_EQUAL_$primitive($state, a, b, $continuation)
{
    $dispatch_fail<>standard_library::operator_$expression_EQUAL_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Object).$dispatch<$Float>standard_library::operator_$expression_EQUAL_$primitive($state, a, b, $continuation)
{
    $dispatch_fail<>standard_library::operator_$expression_EQUAL_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Object).$dispatch<$Integer>standard_library::operator_$expression_EQUAL_$primitive($state, a, b, $continuation)
{
    $dispatch_fail<>standard_library::operator_$expression_EQUAL_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Object).$dispatch<$Object>standard_library::operator_$expression_EQUAL_$primitive($state, a, b, $continuation)
{
    $dispatch_fail<>standard_library::operator_$expression_EQUAL_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure $dispatch_fail<>standard_library::operator_$expression_COMPARE_$primitive($state, a, b, $continuation)
{
    $symbol $the_result;
    standard_library::raise_$expression(
        $state, 
        (((a & " compare ") & b) & " is illegal."), 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure ($Integer).$dispatch<>standard_library::operator_$expression_COMPARE_$primitive($state, a, b, $continuation)
{
    b.$dispatch<$Integer>standard_library::operator_$expression_COMPARE_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Integer).$dispatch<$Integer>standard_library::operator_$expression_COMPARE_$primitive($state, a, b, $continuation)
{
    standard_library::operator_$expression<integer>_COMPARE_$primitive<integer>(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Float).$dispatch<>standard_library::operator_$expression_COMPARE_$primitive($state, a, b, $continuation)
{
    b.$dispatch<$Float>standard_library::operator_$expression_COMPARE_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Float).$dispatch<$Float>standard_library::operator_$expression_COMPARE_$primitive($state, a, b, $continuation)
{
    standard_library::operator_$expression<float>_COMPARE_$primitive<float>(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Function).$dispatch<>standard_library::operator_$expression_COMPARE_$primitive($state, a, b, $continuation)
{
    b.$dispatch<$Function>standard_library::operator_$expression_COMPARE_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Function).$dispatch<$Function>standard_library::operator_$expression_COMPARE_$primitive($state, a, b, $continuation)
{
    standard_library::operator_$expression<string>_COMPARE_$primitive<string>(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Float).$dispatch<$Integer>standard_library::operator_$expression_COMPARE_$primitive($state, a, b, $continuation)
{
    standard_library::operator_$expression<integer>_COMPARE_$primitive<float>(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Integer).$dispatch<$Float>standard_library::operator_$expression_COMPARE_$primitive($state, a, b, $continuation)
{
    standard_library::operator_$expression<float>_COMPARE_$primitive<integer>(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Object).$dispatch<$Function>standard_library::operator_$expression_COMPARE_$primitive($state, a, b, $continuation)
{
    standard_library::operator_$expression<string>_COMPARE_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Object).$dispatch<>standard_library::operator_$expression_COMPARE_$primitive($state, a, b, $continuation)
{
    b.$dispatch<$Object>standard_library::operator_$expression_COMPARE_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Function).$dispatch<$Object>standard_library::operator_$expression_COMPARE_$primitive($state, a, b, $continuation)
{
    standard_library::operator_$expression_COMPARE_$primitive<string>(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Object).$dispatch<$Float>standard_library::operator_$expression_COMPARE_$primitive($state, a, b, $continuation)
{
    $dispatch_fail<>standard_library::operator_$expression_COMPARE_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Object).$dispatch<$Integer>standard_library::operator_$expression_COMPARE_$primitive($state, a, b, $continuation)
{
    $dispatch_fail<>standard_library::operator_$expression_COMPARE_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Object).$dispatch<$Object>standard_library::operator_$expression_COMPARE_$primitive($state, a, b, $continuation)
{
    $dispatch_fail<>standard_library::operator_$expression_COMPARE_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure $dispatch_fail<>standard_library::operator_$expression_AND_$primitive($state, a, b, $continuation)
{
    $symbol $the_result;
    standard_library::raise_$expression(
        $state, 
        (((a & " and ") & b) & "is illegal."), 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure ($Boolean).$dispatch<>standard_library::operator_$expression_AND_$primitive($state, a, b, $continuation)
{
    b.$dispatch<$Boolean>standard_library::operator_$expression_AND_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Boolean).$dispatch<$Boolean>standard_library::operator_$expression_AND_$primitive($state, a, b, $continuation)
{
    standard_library::operator_$expression<boolean>_AND_$primitive<boolean>(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Object).$dispatch<$Boolean>standard_library::operator_$expression_AND_$primitive($state, a, b, $continuation)
{
    $dispatch_fail<>standard_library::operator_$expression_AND_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Object).$dispatch<>standard_library::operator_$expression_AND_$primitive($state, a, b, $continuation)
{
    $dispatch_fail<>standard_library::operator_$expression_AND_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure $dispatch_fail<>standard_library::operator_$expression_OR_$primitive($state, a, b, $continuation)
{
    $symbol $the_result;
    standard_library::raise_$expression(
        $state, 
        (((a & " or ") & b) & "is illegal."), 
        $lambda ($state_0, $result_1)
            {
                $continuation(
                    $state, 
                    $the_result
                    );
            }
        );
}

$procedure ($Boolean).$dispatch<>standard_library::operator_$expression_OR_$primitive($state, a, b, $continuation)
{
    b.$dispatch<$Boolean>standard_library::operator_$expression_OR_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Boolean).$dispatch<$Boolean>standard_library::operator_$expression_OR_$primitive($state, a, b, $continuation)
{
    standard_library::operator_$expression<boolean>_OR_$primitive<boolean>(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Object).$dispatch<$Boolean>standard_library::operator_$expression_OR_$primitive($state, a, b, $continuation)
{
    $dispatch_fail<>standard_library::operator_$expression_OR_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

$procedure ($Object).$dispatch<>standard_library::operator_$expression_OR_$primitive($state, a, b, $continuation)
{
    $dispatch_fail<>standard_library::operator_$expression_OR_$primitive(
        $state, 
        a, 
        b, 
        $continuation
        );
}

